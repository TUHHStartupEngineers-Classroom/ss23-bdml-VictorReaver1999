[
  {
    "objectID": "content/01_journal/AutoML.html",
    "href": "content/01_journal/AutoML.html",
    "title": "AutoML with H2O and GGally",
    "section": "",
    "text": "Challenge Description:\nUse your learning from descriptive features and plot_ggpairs() to further investigate the features. Run the functions above according to the features needed.\nAnswer the questions at the bottom. Most of the time, you will only need the images from diagonal.\nCode Base\n\n# Load libraries\nsuppressMessages(library(h2o))\nsuppressMessages(library(GGally))\nsuppressMessages(library(tidyverse))\n\n# Load and glimpse attrition data\nemployee_attrition_table <- read.csv(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdml-VictorReaver1999\\\\AutoML\\\\HR-Employee-Attrition.txt\")\nemployee_attrition_table %>% glimpse()\n\n#> Rows: 1,470\n#> Columns: 35\n#> $ Age                      <int> 41, 49, 37, 33, 27, 32, 59, 30, 38, 36, 35, 2…\n#> $ Attrition                <chr> \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"…\n#> $ BusinessTravel           <chr> \"Travel_Rarely\", \"Travel_Frequently\", \"Travel…\n#> $ DailyRate                <int> 1102, 279, 1373, 1392, 591, 1005, 1324, 1358,…\n#> $ Department               <chr> \"Sales\", \"Research & Development\", \"Research …\n#> $ DistanceFromHome         <int> 1, 8, 2, 3, 2, 2, 3, 24, 23, 27, 16, 15, 26, …\n#> $ Education                <int> 2, 1, 2, 4, 1, 2, 3, 1, 3, 3, 3, 2, 1, 2, 3, …\n#> $ EducationField           <chr> \"Life Sciences\", \"Life Sciences\", \"Other\", \"L…\n#> $ EmployeeCount            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n#> $ EmployeeNumber           <int> 1, 2, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16,…\n#> $ EnvironmentSatisfaction  <int> 2, 3, 4, 4, 1, 4, 3, 4, 4, 3, 1, 4, 1, 2, 3, …\n#> $ Gender                   <chr> \"Female\", \"Male\", \"Male\", \"Female\", \"Male\", \"…\n#> $ HourlyRate               <int> 94, 61, 92, 56, 40, 79, 81, 67, 44, 94, 84, 4…\n#> $ JobInvolvement           <int> 3, 2, 2, 3, 3, 3, 4, 3, 2, 3, 4, 2, 3, 3, 2, …\n#> $ JobLevel                 <int> 2, 2, 1, 1, 1, 1, 1, 1, 3, 2, 1, 2, 1, 1, 1, …\n#> $ JobRole                  <chr> \"Sales Executive\", \"Research Scientist\", \"Lab…\n#> $ JobSatisfaction          <int> 4, 2, 3, 3, 2, 4, 1, 3, 3, 3, 2, 3, 3, 4, 3, …\n#> $ MaritalStatus            <chr> \"Single\", \"Married\", \"Single\", \"Married\", \"Ma…\n#> $ MonthlyIncome            <int> 5993, 5130, 2090, 2909, 3468, 3068, 2670, 269…\n#> $ MonthlyRate              <int> 19479, 24907, 2396, 23159, 16632, 11864, 9964…\n#> $ NumCompaniesWorked       <int> 8, 1, 6, 1, 9, 0, 4, 1, 0, 6, 0, 0, 1, 0, 5, …\n#> $ Over18                   <chr> \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", …\n#> $ OverTime                 <chr> \"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", \"No\", \"Yes\",…\n#> $ PercentSalaryHike        <int> 11, 23, 15, 11, 12, 13, 20, 22, 21, 13, 13, 1…\n#> $ PerformanceRating        <int> 3, 4, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3, 3, 3, 3, …\n#> $ RelationshipSatisfaction <int> 1, 4, 2, 3, 4, 3, 1, 2, 2, 2, 3, 4, 4, 3, 2, …\n#> $ StandardHours            <int> 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 8…\n#> $ StockOptionLevel         <int> 0, 1, 0, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1, 1, 0, …\n#> $ TotalWorkingYears        <int> 8, 10, 7, 8, 6, 8, 12, 1, 10, 17, 6, 10, 5, 3…\n#> $ TrainingTimesLastYear    <int> 0, 3, 3, 3, 3, 2, 3, 2, 2, 3, 5, 3, 1, 2, 4, …\n#> $ WorkLifeBalance          <int> 1, 3, 3, 3, 3, 2, 2, 3, 3, 2, 3, 3, 2, 3, 3, …\n#> $ YearsAtCompany           <int> 6, 10, 0, 8, 2, 7, 1, 1, 9, 7, 5, 9, 5, 2, 4,…\n#> $ YearsInCurrentRole       <int> 4, 7, 0, 7, 2, 7, 0, 0, 7, 7, 4, 5, 2, 2, 2, …\n#> $ YearsSinceLastPromotion  <int> 0, 1, 0, 3, 2, 3, 0, 0, 1, 7, 0, 0, 4, 1, 0, …\n#> $ YearsWithCurrManager     <int> 5, 7, 0, 0, 2, 6, 0, 0, 8, 7, 3, 8, 3, 2, 3, …\n\n# Create function given in Business Data Case\nplot_ggpairs <- function(data, color = NULL, density_alpha = 0.5) {\n  \n  color_expr <- enquo(color)\n  \n  if (rlang::quo_is_null(color_expr)) {\n    \n    g <- data %>%\n      ggpairs(lower = \"blank\") \n    \n  } else {\n    \n    color_name <- quo_name(color_expr)\n    \n    g <- data %>%\n      ggpairs(mapping = aes_string(color = color_name), \n              lower = \"blank\", legend = 1,\n              diag = list(continuous = wrap(\"densityDiag\", \n                                            alpha = density_alpha))) +\n      theme(legend.position = \"bottom\")\n  }\n  \n  return(g)\n  \n}\n\n# Create the plot\nemp_att_plot <- employee_attrition_table %>%\n  select(Attrition, MonthlyIncome, PercentSalaryHike, StockOptionLevel, EnvironmentSatisfaction, WorkLifeBalance, JobInvolvement, OverTime, TrainingTimesLastYear, YearsAtCompany, YearsSinceLastPromotion) %>%\n  plot_ggpairs(color = Attrition)\n\n#> Warning: `aes_string()` was deprecated in ggplot2 3.0.0.\n#> ℹ Please use tidy evaluation idioms with `aes()`.\n#> ℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n\n# Save the plot\nggsave(\"emp_att_plot.png\", emp_att_plot, width = 15, height = 15)\n\n# Display the plot\nemp_att_plot\n\n\n\n\n\n\n\nChallenge Questions\n\nCompensation Features\n\nWhat can you deduce about the interaction between Monthly Income and Attrition?\nAnswer:\n\nThose that are leaving have a lower Monthly Income\n\n\nCompensation Features\n\nWhat can you deduce about the interaction between Percent Salary Hike and Attrition?\nAnswer:\n\nIt’s difficult to deduce anything based on the visualization\n\n\nCompensation Features\n\nWhat can you deduce about the interaction between Stock Option Level and Attrition?\nAnswer:\n\nThose that are staying have a higher stock option level\n\n\nSurvey Results\n\nWhat can you deduce about the interaction between Environment Satisfaction and Attrition?\nAnswer:\n\nA higher proportion of those leaving have a low environment satisfaction level\n\n\nSurvey Results\n\nWhat can you deduce about the interaction between Work Life Balance and Attrition?\nAnswer:\n\nThose that are staying have a higher density of 2’s and 3’\n\n\nPerformance Data\n\nWhat Can you deduce about the interaction between Job Involvement and Attrition?\nAnswer:\n\nThose that are leaving have a lower density of 3’s and 4’s\n\n\nWork-Life Features\n\nWhat can you deduce about the interaction between Over Time and Attrition?\nAnswer:\n\nThe proportion of those leaving that are working Over Time are high compared to those that are not leaving\n\n\nTraining and Education\n\nWhat can you deduce about the interaction between Training Times Last Year and Attrition?\nAnswer:\n\nIt’s difficult to deduce anything based on the visualization\n\n\nTime-Based Features\n\nWhat can you deduce about the interaction between Years At Company and Attrition?\nAnswer:\n\nPeople that leave tend to have less working years at the company\n\n\nTime-Based Features\n\nWhat can you deduce about the interaction between Years Since Last Promotion and Attrition?\nAnswer:\n\nIt’s difficult to deduce anything based on the visualization\n\nEnd of AutoML Challenge"
  },
  {
    "objectID": "content/01_journal/AutoML2PerfMeas.html",
    "href": "content/01_journal/AutoML2PerfMeas.html",
    "title": "AutoML Part 2 and Performance Measures",
    "section": "",
    "text": "AutoML Part 2 Challenge:\nFor the challenge, we shall be working with a Product Backorders dataset. The goal here is to predict whether or not a product will be put on backorder status, given a number of product metrics such as current inventory, transit time, demand forecasts and prior sales. It’s a classic Binary Classification problem.\nSteps:\n\nLoad the training & test dataset\nSpecifiy the response and predictor variables\nRun AutoML specifying the stopping criterion\nView the leaderboard\nPredicting using Leader Model\nSave the leader model\n\nPerformance Measures Challenge:\nApply all the steps you have learned in this session on the dataset from challenge of the last session (Product Backorders):\nSteps:\n\nLeaderboard visualization\nTune a model with grid search\nVisualize the trade of between the precision and the recall and the optimal threshold\nROC Plot\nPrecision vs Recall Plot\nGain Plot\nLift Plot\nDashboard with cowplot\n\nAutoML Part 2 and Performance Measures Code Base\n\n# Load the libraries\n\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(GGally))\nsuppressMessages(library(h2o))\nsuppressMessages(library(recipes))\nsuppressMessages(library(rsample))\nsuppressMessages(library(knitr))\nsuppressMessages(library(cowplot))\nsuppressMessages(library(glue))\n\n# Load the dataset\nproduct_backorders_tbl <- read_csv(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdml-VictorReaver1999\\\\PerfMeas\\\\product_backorders.csv\")\n\n#> Rows: 19053 Columns: 23\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr  (7): potential_issue, deck_risk, oe_constraint, ppap_risk, stop_auto_bu...\n#> dbl (16): sku, national_inv, lead_time, in_transit_qty, forecast_3_month, fo...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nproduct_backorders_tbl %>% glimpse()\n\n#> Rows: 19,053\n#> Columns: 23\n#> $ sku               <dbl> 1113121, 1113268, 1113874, 1114222, 1114823, 1115453…\n#> $ national_inv      <dbl> 0, 0, 20, 0, 0, 55, -34, 4, 2, -7, 1, 2, 0, 0, 0, 0,…\n#> $ lead_time         <dbl> 8, 8, 2, 8, 12, 8, 8, 9, 8, 8, 8, 8, 12, 2, 12, 4, 2…\n#> $ in_transit_qty    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0…\n#> $ forecast_3_month  <dbl> 6, 2, 45, 9, 31, 216, 120, 43, 4, 56, 2, 5, 5, 54, 4…\n#> $ forecast_6_month  <dbl> 6, 3, 99, 14, 31, 360, 240, 67, 6, 96, 4, 9, 6, 72, …\n#> $ forecast_9_month  <dbl> 6, 4, 153, 21, 31, 492, 240, 115, 9, 112, 6, 13, 9, …\n#> $ sales_1_month     <dbl> 0, 1, 16, 5, 7, 30, 83, 5, 1, 13, 0, 1, 0, 0, 1, 0, …\n#> $ sales_3_month     <dbl> 4, 2, 42, 17, 15, 108, 122, 22, 5, 30, 2, 5, 4, 0, 3…\n#> $ sales_6_month     <dbl> 9, 3, 80, 36, 33, 275, 144, 40, 6, 56, 3, 8, 5, 0, 4…\n#> $ sales_9_month     <dbl> 12, 3, 111, 43, 47, 340, 165, 58, 9, 76, 4, 11, 6, 0…\n#> $ min_bank          <dbl> 0, 0, 10, 0, 2, 51, 33, 4, 2, 0, 0, 0, 3, 4, 0, 0, 0…\n#> $ potential_issue   <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ pieces_past_due   <dbl> 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ perf_6_month_avg  <dbl> 0.90, 0.96, 0.81, 0.96, 0.98, 0.00, 1.00, 0.69, 1.00…\n#> $ perf_12_month_avg <dbl> 0.89, 0.97, 0.88, 0.98, 0.98, 0.00, 0.97, 0.68, 0.95…\n#> $ local_bo_qty      <dbl> 0, 0, 0, 0, 0, 0, 34, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, …\n#> $ deck_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ oe_constraint     <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ ppap_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No…\n#> $ stop_auto_buy     <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n#> $ rev_stop          <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ went_on_backorder <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n\n# Create data pre-processing recipe and convert certain variables to factors\nrecipe_obj <- recipe(went_on_backorder ~ ., data = product_backorders_tbl) %>%\n  step_zv(all_predictors()) %>%\n  step_mutate_at(potential_issue, deck_risk, oe_constraint, ppap_risk, stop_auto_buy, rev_stop, fn = as.factor) %>%\n  prep()\n\n# recipe_obj\n\n# Split the dataset into train and test\nset.seed(1234)\n\nsplit_obj <- initial_split(product_backorders_tbl, prop = 0.85)\ntrain_readable_tbl <- training(split_obj)\ntest_readable_tbl <- testing(split_obj)\n\n# Pre-process it using the recipe\ntrain_tbl <- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)\n\n# Initialize the H2O package\nh2o.init()\n\n#> \n#> H2O is not running yet, starting it now...\n#> \n#> Note:  In case of errors look at the following log files:\n#>     C:\\Users\\fvsha\\AppData\\Local\\Temp\\RtmpsTFGrg\\file30044ac8ba0/h2o_fvsha_started_from_r.out\n#>     C:\\Users\\fvsha\\AppData\\Local\\Temp\\RtmpsTFGrg\\file30047b2c34bb/h2o_fvsha_started_from_r.err\n#> \n#> \n#> Starting H2O JVM and connecting:  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         2 seconds 22 milliseconds \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.4 \n#>     H2O cluster version age:    1 month and 18 days \n#>     H2O cluster name:           H2O_started_from_R_fvsha_pgz902 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   3.40 GB \n#>     H2O cluster total cores:    8 \n#>     H2O cluster allowed cores:  8 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n\n# Use H2O to split train set into train and val set\nsplit_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o <- split_h2o[[1]] \nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_tbl)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ny <- \"went_on_backorder\" # Target variable\nx <- setdiff(names(train_h2o), y) # Assign predictor variables\n\n# Initialize the automl process and specify the cross validation folds and \n# the leaderboard dataset\nautoml_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 120,\n  nfolds            = 5\n)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=                                                                     |   1%\n#> 10:01:29.461: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n#> 10:01:29.476: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |==                                                                    |   3%\n  |                                                                            \n  |===                                                                   |   5%\n  |                                                                            \n  |====                                                                  |   6%\n  |                                                                            \n  |======                                                                |   8%\n  |                                                                            \n  |=======                                                               |  10%\n  |                                                                            \n  |========                                                              |  12%\n  |                                                                            \n  |==========                                                            |  14%\n  |                                                                            \n  |===========                                                           |  15%\n  |                                                                            \n  |============                                                          |  17%\n  |                                                                            \n  |=============                                                         |  19%\n  |                                                                            \n  |==============                                                        |  21%\n  |                                                                            \n  |================                                                      |  22%\n  |                                                                            \n  |=================                                                     |  24%\n  |                                                                            \n  |==================                                                    |  26%\n  |                                                                            \n  |===================                                                   |  28%\n  |                                                                            \n  |====================                                                  |  29%\n  |                                                                            \n  |======================                                                |  31%\n  |                                                                            \n  |=======================                                               |  33%\n  |                                                                            \n  |========================                                              |  34%\n  |                                                                            \n  |=========================                                             |  36%\n  |                                                                            \n  |===========================                                           |  38%\n  |                                                                            \n  |============================                                          |  40%\n  |                                                                            \n  |=============================                                         |  41%\n  |                                                                            \n  |==============================                                        |  43%\n  |                                                                            \n  |===============================                                       |  45%\n  |                                                                            \n  |=================================                                     |  47%\n  |                                                                            \n  |==================================                                    |  48%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |====================================                                  |  52%\n  |                                                                            \n  |=====================================                                 |  54%\n  |                                                                            \n  |=======================================                               |  55%\n  |                                                                            \n  |========================================                              |  57%\n  |                                                                            \n  |=========================================                             |  59%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |============================================                          |  62%\n  |                                                                            \n  |=============================================                         |  64%\n  |                                                                            \n  |==============================================                        |  66%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |================================================                      |  69%\n  |                                                                            \n  |==================================================                    |  71%\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |==========================================================            |  83%\n  |                                                                            \n  |===========================================================           |  85%\n  |                                                                            \n  |==============================================================        |  89%\n  |                                                                            \n  |================================================================      |  91%\n  |                                                                            \n  |=================================================================     |  93%\n  |                                                                            \n  |==================================================================    |  95%\n  |                                                                            \n  |===================================================================   |  96%\n  |                                                                            \n  |===================================================================== |  99%\n  |                                                                            \n  |======================================================================| 100%\n\ntypeof(automl_models_h2o)\n\n#> [1] \"S4\"\n\nslotNames(automl_models_h2o)\n\n#> [1] \"project_name\"   \"leader\"         \"leaderboard\"    \"event_log\"     \n#> [5] \"modeling_steps\" \"training_info\"\n\nautoml_models_h2o@leaderboard\n\n#>                                                  model_id       auc   logloss\n#> 1    StackedEnsemble_AllModels_3_AutoML_1_20230616_100129 0.9559137 0.1700202\n#> 2    StackedEnsemble_AllModels_2_AutoML_1_20230616_100129 0.9542343 0.1710901\n#> 3    StackedEnsemble_AllModels_1_AutoML_1_20230616_100129 0.9536078 0.1734787\n#> 4 StackedEnsemble_BestOfFamily_4_AutoML_1_20230616_100129 0.9533307 0.1718307\n#> 5 StackedEnsemble_BestOfFamily_3_AutoML_1_20230616_100129 0.9533302 0.1718538\n#> 6 StackedEnsemble_BestOfFamily_2_AutoML_1_20230616_100129 0.9532188 0.1751266\n#>       aucpr mean_per_class_error      rmse        mse\n#> 1 0.7681372            0.1367904 0.2271157 0.05158152\n#> 2 0.7665611            0.1447287 0.2273710 0.05169758\n#> 3 0.7568165            0.1429130 0.2286106 0.05226282\n#> 4 0.7668508            0.1256201 0.2277665 0.05187758\n#> 5 0.7666942            0.1256201 0.2277812 0.05188426\n#> 6 0.7563868            0.1477804 0.2297528 0.05278636\n#> \n#> [35 rows x 7 columns]\n\nautoml_models_h2o@leader\n\n#> Model Details:\n#> ==============\n#> \n#> H2OBinomialModel: stackedensemble\n#> Model ID:  StackedEnsemble_AllModels_3_AutoML_1_20230616_100129 \n#> Model Summary for Stacked Ensemble: \n#>                                          key            value\n#> 1                          Stacking strategy cross_validation\n#> 2       Number of base models (used / total)            11/27\n#> 3           # GBM base models (used / total)             9/19\n#> 4           # DRF base models (used / total)              1/2\n#> 5  # DeepLearning base models (used / total)              1/5\n#> 6           # GLM base models (used / total)              0/1\n#> 7                      Metalearner algorithm              GLM\n#> 8         Metalearner fold assignment scheme           Random\n#> 9                         Metalearner nfolds                5\n#> 10                   Metalearner fold_column               NA\n#> 11        Custom metalearner hyperparameters             None\n#> \n#> \n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on training data. **\n#> \n#> MSE:  0.02250138\n#> RMSE:  0.1500046\n#> LogLoss:  0.08666954\n#> Mean Per-Class Error:  0.07208893\n#> AUC:  0.992294\n#> AUCPR:  0.9582933\n#> Gini:  0.9845879\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No  Yes    Error        Rate\n#> No     8736  117 0.013216   =117/8853\n#> Yes     162 1075 0.130962   =162/1237\n#> Totals 8898 1192 0.027651  =279/10090\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.463641    0.885138 173\n#> 2                       max f2  0.249688    0.908530 232\n#> 3                 max f0point5  0.677075    0.916617 119\n#> 4                 max accuracy  0.505843    0.972349 161\n#> 5                max precision  0.993095    1.000000   0\n#> 6                   max recall  0.020770    1.000000 352\n#> 7              max specificity  0.993095    1.000000   0\n#> 8             max absolute_mcc  0.463641    0.869619 173\n#> 9   max min_per_class_accuracy  0.237222    0.955538 236\n#> 10 max mean_per_class_accuracy  0.237222    0.956194 236\n#> 11                     max tns  0.993095 8853.000000   0\n#> 12                     max fns  0.993095 1235.000000   0\n#> 13                     max fps  0.000283 8853.000000 399\n#> 14                     max tps  0.020770 1237.000000 352\n#> 15                     max tnr  0.993095    1.000000   0\n#> 16                     max fnr  0.993095    0.998383   0\n#> 17                     max fpr  0.000283    1.000000 399\n#> 18                     max tpr  0.020770    1.000000 352\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on validation data. **\n#> \n#> MSE:  0.04359992\n#> RMSE:  0.2088059\n#> LogLoss:  0.1466714\n#> Mean Per-Class Error:  0.141584\n#> AUC:  0.9629414\n#> AUCPR:  0.7861797\n#> Gini:  0.9258829\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No Yes    Error       Rate\n#> No     2044  85 0.039925   =85/2129\n#> Yes      63 196 0.243243    =63/259\n#> Totals 2107 281 0.061977  =148/2388\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.407494    0.725926 164\n#> 2                       max f2  0.246740    0.795129 210\n#> 3                 max f0point5  0.694115    0.762355  92\n#> 4                 max accuracy  0.686517    0.940955  95\n#> 5                max precision  0.981880    1.000000   0\n#> 6                   max recall  0.014337    1.000000 358\n#> 7              max specificity  0.981880    1.000000   0\n#> 8             max absolute_mcc  0.407494    0.691783 164\n#> 9   max min_per_class_accuracy  0.146902    0.899953 251\n#> 10 max mean_per_class_accuracy  0.094945    0.904396 279\n#> 11                     max tns  0.981880 2129.000000   0\n#> 12                     max fns  0.981880  258.000000   0\n#> 13                     max fps  0.000208 2129.000000 399\n#> 14                     max tps  0.014337  259.000000 358\n#> 15                     max tnr  0.981880    1.000000   0\n#> 16                     max fnr  0.981880    0.996139   0\n#> 17                     max fpr  0.000208    1.000000 399\n#> 18                     max tpr  0.014337    1.000000 358\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> MSE:  0.04982626\n#> RMSE:  0.223218\n#> LogLoss:  0.1684217\n#> Mean Per-Class Error:  0.1657596\n#> AUC:  0.952705\n#> AUCPR:  0.755486\n#> Gini:  0.90541\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>           No  Yes    Error        Rate\n#> No     11695  458 0.037686  =458/12153\n#> Yes      486 1168 0.293833   =486/1654\n#> Totals 12181 1626 0.068371  =944/13807\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold        value idx\n#> 1                       max f1  0.412844     0.712195 186\n#> 2                       max f2  0.131430     0.779423 284\n#> 3                 max f0point5  0.587964     0.746984 133\n#> 4                 max accuracy  0.525838     0.933874 152\n#> 5                max precision  0.990784     1.000000   0\n#> 6                   max recall  0.001353     1.000000 396\n#> 7              max specificity  0.990784     1.000000   0\n#> 8             max absolute_mcc  0.412844     0.673436 186\n#> 9   max min_per_class_accuracy  0.114758     0.885954 292\n#> 10 max mean_per_class_accuracy  0.091380     0.890806 304\n#> 11                     max tns  0.990784 12153.000000   0\n#> 12                     max fns  0.990784  1653.000000   0\n#> 13                     max fps  0.000276 12153.000000 399\n#> 14                     max tps  0.001353  1654.000000 396\n#> 15                     max tnr  0.990784     1.000000   0\n#> 16                     max fnr  0.990784     0.999395   0\n#> 17                     max fpr  0.000276     1.000000 399\n#> 18                     max tpr  0.001353     1.000000 396\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> Cross-Validation Metrics Summary: \n#>                 mean        sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#> accuracy    0.931507  0.003934   0.927676   0.935239   0.927872   0.935935\n#> auc         0.952590  0.007786   0.958352   0.959613   0.953138   0.939975\n#> err         0.068493  0.003934   0.072324   0.064761   0.072128   0.064065\n#> err_count 189.200000 12.275992 202.000000 179.000000 199.000000 174.000000\n#> f0point5    0.713392  0.020416   0.686176   0.728261   0.709261   0.738255\n#>           cv_5_valid\n#> accuracy    0.930811\n#> auc         0.951873\n#> err         0.069189\n#> err_count 192.000000\n#> f0point5    0.705009\n#> \n#> ---\n#>                         mean        sd cv_1_valid cv_2_valid cv_3_valid\n#> precision           0.712170  0.039203   0.660194   0.714667   0.709677\n#> r2                  0.527052  0.028772   0.541437   0.567201   0.525608\n#> recall              0.728867  0.072980   0.814371   0.788235   0.707602\n#> residual_deviance 929.185060 40.221832 899.525600 874.595030 949.708300\n#> rmse                0.223138  0.004977   0.219726   0.216078   0.226970\n#> specificity         0.958927  0.011610   0.943066   0.955858   0.959040\n#>                   cv_4_valid cv_5_valid\n#> precision           0.770428   0.705882\n#> r2                  0.494134   0.506882\n#> recall              0.632588   0.701538\n#> residual_deviance 969.984130 952.112300\n#> rmse                0.227110   0.225807\n#> specificity         0.975447   0.961225\n\ntypeof(automl_models_h2o@leader)\n\n#> [1] \"S4\"\n\n# Predict using H2O and save output as table\npredictions <- h2o.predict(automl_models_h2o@leader, newdata = as.h2o(test_tbl))\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\npredictions_tbl <-\n  predictions %>%\n  as_tibble()\n\n# Save the resulting model in the current working directory\n# h2o.saveModel(automl_models_h2o@leader, path=\"saved_model/\")\n\n# End of AutoML2\n\n\n# Start of Performance Measures\n# Tasks:\n# 1. Leaderboard visualization\n# 2. Tune a model with grid search\n# 3. Visualize the trade of between the precision and the recall and the optimal threshold\n# 4. ROC Plot\n# 5. Precision vs Recall Plot\n# 6. Gain Plot\n# 7. Lift Plot\n# 8. Dashboard with cowplot\n\n# Leaderboard visualization\n\n# View the predictions table\npredictions_tbl %>% glimpse()\n\n#> Rows: 2,858\n#> Columns: 3\n#> $ predict <fct> Yes, Yes, Yes, Yes, Yes, Yes, No, No, Yes, Yes, Yes, Yes, No, …\n#> $ No      <dbl> 0.33526212, 0.52960722, 0.08328559, 0.12223489, 0.08851156, 0.…\n#> $ Yes     <dbl> 0.66473788, 0.47039278, 0.91671441, 0.87776511, 0.91148844, 0.…\n\n# Exclude certain metrics from leaderboard\nautoml_models_h2o@leaderboard %>% \n  as_tibble() %>% \n  select(-c(mean_per_class_error, rmse, mse))\n\n\n\n  \n\n\n# Create the plotting function for the models based on AUC and LogLoss (taken from Business Case)\nplot_h2o_leaderboard <- function(h2o_leaderboard, order_by = c(\"auc\", \"logloss\"), \n                                 n_max = 20, size = 4, include_lbl = TRUE) {\n  \n  \n  order_by <- tolower(order_by[[1]])\n  \n  leaderboard_tbl <- h2o_leaderboard %>%\n    as_tibble() %>%\n    select(-c(aucpr, mean_per_class_error, rmse, mse)) %>% \n    mutate(model_type = str_extract(model_id, \"[^_]+\")) %>%\n    rownames_to_column(var = \"rowname\") %>%\n    mutate(model_id = paste0(rowname, \". \", model_id) %>% as.factor())\n  \n  # Transformation\n  if (order_by == \"auc\") {\n    \n    data_transformed_tbl <- leaderboard_tbl %>%\n      slice(1:n_max) %>%\n      mutate(\n        model_id   = as_factor(model_id) %>% reorder(auc),\n        model_type = as.factor(model_type)\n      ) %>%\n      pivot_longer(cols = -c(model_id, model_type, rowname), \n                   names_to = \"key\", \n                   values_to = \"value\", \n                   names_transform = list(key = forcats::fct_inorder)\n      )\n    \n  } else if (order_by == \"logloss\") {\n    \n    data_transformed_tbl <- leaderboard_tbl %>%\n      slice(1:n_max) %>%\n      mutate(\n        model_id   = as_factor(model_id) %>% reorder(logloss) %>% fct_rev(),\n        model_type = as.factor(model_type)\n      ) %>%\n      pivot_longer(cols = -c(model_id, model_type, rowname), \n                   names_to = \"key\", \n                   values_to = \"value\", \n                   names_transform = list(key = forcats::fct_inorder)\n      )\n    \n  } else {\n    # If nothing is supplied\n    stop(paste0(\"order_by = '\", order_by, \"' is not a permitted option.\"))\n  }\n  \n  # Visualization\n  g <- data_transformed_tbl %>%\n    ggplot(aes(value, model_id, color = model_type)) +\n    geom_point(size = size) +\n    facet_wrap(~ key, scales = \"free_x\") +\n    labs(title = \"Leaderboard Metrics\",\n         subtitle = paste0(\"Ordered by: \", toupper(order_by)),\n         y = \"Model Postion, Model ID\", x = \"\")\n  \n  if (include_lbl) g <- g + geom_label(aes(label = round(value, 2), \n                                           hjust = \"inward\"))\n  \n  return(g)\n  \n}\n\n# Use our function to create the plot\nh2o_plot <- automl_models_h2o@leaderboard %>% plot_h2o_leaderboard()\n\n# Save the plot\nggsave(\"h2o_plot.png\", h2o_plot, width=15, height=15)\n\nh2o_plot\n\n\n\n\n\n\n# Grid Search\n\n# Load the model we saved\ndeeplearning_h2o <- h2o.loadModel(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdml-VictorReaver1999\\\\PerfMeas\\\\saved_model\\\\StackedEnsemble_AllModels_3_AutoML_1\")\n\n# View all of its parameters\ndeeplearning_h2o@allparameters\n\n#> $model_id\n#> [1] \"StackedEnsemble_AllModels_3_AutoML_1_20230615_175016\"\n#> \n#> $base_models\n#> $base_models[[1]]\n#> $base_models[[1]]$`__meta`\n#> $base_models[[1]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[1]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[1]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[1]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_1\"\n#> \n#> $base_models[[1]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[1]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[2]]\n#> $base_models[[2]]$`__meta`\n#> $base_models[[2]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[2]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[2]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[2]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_7\"\n#> \n#> $base_models[[2]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[2]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[3]]\n#> $base_models[[3]]$`__meta`\n#> $base_models[[3]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[3]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[3]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[3]]$name\n#> [1] \"GBM_4_AutoML_1_20230615_175016\"\n#> \n#> $base_models[[3]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[3]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[4]]\n#> $base_models[[4]]$`__meta`\n#> $base_models[[4]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[4]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[4]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[4]]$name\n#> [1] \"GBM_1_AutoML_1_20230615_175016\"\n#> \n#> $base_models[[4]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[4]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[5]]\n#> $base_models[[5]]$`__meta`\n#> $base_models[[5]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[5]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[5]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[5]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_9\"\n#> \n#> $base_models[[5]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[5]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[6]]\n#> $base_models[[6]]$`__meta`\n#> $base_models[[6]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[6]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[6]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[6]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_5\"\n#> \n#> $base_models[[6]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[6]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[7]]\n#> $base_models[[7]]$`__meta`\n#> $base_models[[7]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[7]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[7]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[7]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_10\"\n#> \n#> $base_models[[7]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[7]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[8]]\n#> $base_models[[8]]$`__meta`\n#> $base_models[[8]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[8]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[8]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[8]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_4\"\n#> \n#> $base_models[[8]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[8]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[9]]\n#> $base_models[[9]]$`__meta`\n#> $base_models[[9]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[9]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[9]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[9]]$name\n#> [1] \"GBM_3_AutoML_1_20230615_175016\"\n#> \n#> $base_models[[9]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[9]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[10]]\n#> $base_models[[10]]$`__meta`\n#> $base_models[[10]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[10]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[10]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[10]]$name\n#> [1] \"GBM_2_AutoML_1_20230615_175016\"\n#> \n#> $base_models[[10]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[10]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[11]]\n#> $base_models[[11]]$`__meta`\n#> $base_models[[11]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[11]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[11]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[11]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_11\"\n#> \n#> $base_models[[11]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[11]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[12]]\n#> $base_models[[12]]$`__meta`\n#> $base_models[[12]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[12]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[12]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[12]]$name\n#> [1] \"GBM_5_AutoML_1_20230615_175016\"\n#> \n#> $base_models[[12]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[12]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[13]]\n#> $base_models[[13]]$`__meta`\n#> $base_models[[13]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[13]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[13]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[13]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_6\"\n#> \n#> $base_models[[13]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[13]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[14]]\n#> $base_models[[14]]$`__meta`\n#> $base_models[[14]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[14]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[14]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[14]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_8\"\n#> \n#> $base_models[[14]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[14]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[15]]\n#> $base_models[[15]]$`__meta`\n#> $base_models[[15]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[15]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[15]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[15]]$name\n#> [1] \"DRF_1_AutoML_1_20230615_175016\"\n#> \n#> $base_models[[15]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[15]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[16]]\n#> $base_models[[16]]$`__meta`\n#> $base_models[[16]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[16]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[16]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[16]]$name\n#> [1] \"XRT_1_AutoML_1_20230615_175016\"\n#> \n#> $base_models[[16]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[16]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[17]]\n#> $base_models[[17]]$`__meta`\n#> $base_models[[17]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[17]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[17]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[17]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_3\"\n#> \n#> $base_models[[17]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[17]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[18]]\n#> $base_models[[18]]$`__meta`\n#> $base_models[[18]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[18]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[18]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[18]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_2\"\n#> \n#> $base_models[[18]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[18]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[19]]\n#> $base_models[[19]]$`__meta`\n#> $base_models[[19]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[19]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[19]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[19]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_12\"\n#> \n#> $base_models[[19]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[19]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[20]]\n#> $base_models[[20]]$`__meta`\n#> $base_models[[20]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[20]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[20]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[20]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_13\"\n#> \n#> $base_models[[20]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[20]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[21]]\n#> $base_models[[21]]$`__meta`\n#> $base_models[[21]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[21]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[21]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[21]]$name\n#> [1] \"DeepLearning_1_AutoML_1_20230615_175016\"\n#> \n#> $base_models[[21]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[21]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[22]]\n#> $base_models[[22]]$`__meta`\n#> $base_models[[22]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[22]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[22]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[22]]$name\n#> [1] \"DeepLearning_grid_1_AutoML_1_20230615_175016_model_1\"\n#> \n#> $base_models[[22]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[22]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[23]]\n#> $base_models[[23]]$`__meta`\n#> $base_models[[23]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[23]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[23]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[23]]$name\n#> [1] \"GLM_1_AutoML_1_20230615_175016\"\n#> \n#> $base_models[[23]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[23]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[24]]\n#> $base_models[[24]]$`__meta`\n#> $base_models[[24]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[24]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[24]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[24]]$name\n#> [1] \"DeepLearning_grid_1_AutoML_1_20230615_175016_model_2\"\n#> \n#> $base_models[[24]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[24]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[25]]\n#> $base_models[[25]]$`__meta`\n#> $base_models[[25]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[25]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[25]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[25]]$name\n#> [1] \"DeepLearning_grid_1_AutoML_1_20230615_175016_model_4\"\n#> \n#> $base_models[[25]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[25]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[26]]\n#> $base_models[[26]]$`__meta`\n#> $base_models[[26]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[26]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[26]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[26]]$name\n#> [1] \"DeepLearning_grid_1_AutoML_1_20230615_175016_model_3\"\n#> \n#> $base_models[[26]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[26]]$URL\n#> NULL\n#> \n#> \n#> \n#> $metalearner_algorithm\n#> [1] \"glm\"\n#> \n#> $metalearner_nfolds\n#> [1] 5\n#> \n#> $metalearner_params\n#> [1] \"\"\n#> \n#> $metalearner_transform\n#> [1] \"Logit\"\n#> \n#> $max_runtime_secs\n#> [1] 7.085\n#> \n#> $seed\n#> [1] \"-985515021417168851\"\n#> \n#> $score_training_samples\n#> [1] 10000\n#> \n#> $keep_levelone_frame\n#> [1] TRUE\n#> \n#> $auc_type\n#> [1] \"AUTO\"\n#> \n#> $x\n#>  [1] \"sku\"               \"national_inv\"      \"lead_time\"        \n#>  [4] \"in_transit_qty\"    \"forecast_3_month\"  \"forecast_6_month\" \n#>  [7] \"forecast_9_month\"  \"sales_1_month\"     \"sales_3_month\"    \n#> [10] \"sales_6_month\"     \"sales_9_month\"     \"min_bank\"         \n#> [13] \"potential_issue\"   \"pieces_past_due\"   \"perf_6_month_avg\" \n#> [16] \"perf_12_month_avg\" \"local_bo_qty\"      \"deck_risk\"        \n#> [19] \"oe_constraint\"     \"ppap_risk\"         \"stop_auto_buy\"    \n#> [22] \"rev_stop\"         \n#> \n#> $y\n#> [1] \"went_on_backorder\"\n\nDeeplearning_grid_01 <- h2o.grid( algorithm = \"deeplearning\",grid_id = \"Deaplearning_grid_01\",\n  \n     # Predictor and response variables\n     x = x,\n     y = y,\n\n     # Traind and Validation sets + the number of folds for CV\n     training_frame   = train_h2o,\n     validation_frame = valid_h2o,\n     nfolds = 5,\n\n     # Hyperparamters\n     hyper_params = list(\n         # Use some combinations (the first one was the original)\n         hidden = list(c(10, 10, 10), c(50, 20, 10), c(20, 20, 20)),\n         epochs = c(10, 50, 100)\n     )\n )\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Get the 3rd model from H2O's Deep Learning Grid Models, Save it, and then load it\n# Deeplearning_grid_01_model_3 <- h2o.getModel(\"Deaplearning_grid_01_model_3\")\n# Deeplearning_grid_01_model_3 %>% h2o.saveModel(path = \"save_model/Deaplearning_grid_01_model_3\")\nDeeplearning_grid_01_model_3 <- h2o.loadModel(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdml-VictorReaver1999\\\\PerfMeas\\\\save_model\\\\Deaplearning_grid_01_model_3\")\n\n# Evaluate and save its performance and then transform it into a table through h2o metric extraction\nperformance_h2o <- h2o.performance(Deeplearning_grid_01_model_3, newdata = as.h2o(test_tbl))\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nperformance_tbl <- performance_h2o %>% h2o.metric() %>% as.tibble()\n\n#> Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#> ℹ Please use `as_tibble()` instead.\n#> ℹ The signature and semantics have changed, see `?as_tibble`.\n\n# specify a new theme \ntheme_new <- theme(\n  legend.position  = \"bottom\",\n  panel.background = element_rect(fill   = \"transparent\"),\n  panel.border     = element_rect(color = \"black\", fill = NA, size = 0.5),\n  panel.grid.major = element_line(color = \"grey\", size = 0.333)\n  ) \n\n#> Warning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\n#> ℹ Please use the `linewidth` argument instead.\n\n\n#> Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\n#> ℹ Please use the `linewidth` argument instead.\n\n# Save the performance table\n# saveRDS(performance_tbl, file = \"performance_tbl.rds\")\n\n# Load the performance table\nperformance_tbl <- readRDS(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdml-VictorReaver1999\\\\PerfMeas\\\\performance_tbl.rds\")\n\n\n# Visualize the trade off between the precision and the recall and the optimal threshold\nperformance_tbl %>%\n  filter(f1 == max(f1))\n\n\n\n  \n\n\nprecision_vs_recall_plot_optim <- performance_tbl %>%\n  ggplot(aes(x = threshold)) +\n  geom_line(aes(y = precision), color = \"blue\", size = 1) +\n  geom_line(aes(y = recall), color = \"red\", size = 1) +\n  \n  # Insert line where precision and recall are harmonically optimized\n  geom_vline(xintercept = h2o.find_threshold_by_max_metric(performance_h2o, \"f1\")) +\n  labs(title = \"Precision vs Recall\", y = \"value\") +\n  theme_new\n\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `linewidth` instead.\n\nggsave(\"precision_vs_recall_plot_optim.png\", precision_vs_recall_plot_optim)\n\n#> Saving 7 x 5 in image\n\nprecision_vs_recall_plot_optim\n\n\n\n\n\n\n# Visualize the ROC Plot\nROC_plot <- performance_tbl %>%\n  ggplot(aes(fpr, tpr)) +\n  geom_line(size = 1) +\n  \n  # just for demonstration purposes\n  geom_abline(color = \"red\", linetype = \"dotted\") +\n  \n  theme_new +\n  theme(\n    legend.direction = \"vertical\",\n  ) +\n  labs(\n    title = \"ROC Plot\",\n    subtitle = \"Performance of 3 Top Performing Models\"\n  )\n\nggsave(\"ROC_plot.png\", ROC_plot)\n\n#> Saving 7 x 5 in image\n\nROC_plot\n\n\n\n\n\n\n# Precision vs Recall Plot\nprec_vs_recall <- performance_tbl %>%\n  ggplot(aes(recall, precision)) +\n  geom_line(size = 1) +\n  theme_new + \n  theme(\n    legend.direction = \"vertical\",\n  ) +\n  labs(\n    title = \"Precision vs Recall Plot\",\n    subtitle = \"Performance of 3 Top Performing Models\"\n  )\n\nggsave(\"Prec_Vs_Recall.png\", prec_vs_recall)\n\n#> Saving 7 x 5 in image\n\nprec_vs_recall\n\n\n\n\n\n\n# Creating the ranked predictions table\nranked_predictions_tbl <- predictions_tbl %>%\n  bind_cols(test_tbl) %>%\n  select(predict:Yes, went_on_backorder) %>%\n  # Sorting from highest to lowest class probability\n  arrange(desc(Yes))\n\n# Creating the gain and lift table from the ranked predictions table\ncalculated_gain_lift_tbl <- ranked_predictions_tbl %>%\n  mutate(ntile = ntile(Yes, n = 10)) %>%\n  group_by(ntile) %>%\n  summarise(\n    cases = n(),\n    responses = sum(went_on_backorder == \"Yes\")\n  ) %>%\n  arrange(desc(ntile)) %>%\n  \n  # Add group numbers (opposite of ntile)\n  mutate(group = row_number()) %>%\n  select(group, cases, responses) %>%\n  \n  # Calculations\n  mutate(\n    cumulative_responses = cumsum(responses),\n    pct_responses        = responses / sum(responses),\n    gain                 = cumsum(pct_responses),\n    cumulative_pct_cases = cumsum(cases) / sum(cases),\n    lift                 = gain / cumulative_pct_cases,\n    gain_baseline        = cumulative_pct_cases,\n    lift_baseline        = gain_baseline / cumulative_pct_cases\n  )\n\n\n# Obtaining performance metrics for the gain_lift_table\ngain_lift_tbl <- performance_h2o %>%\n  h2o.gainsLift() %>%\n  as.tibble()\n\n# Transform the gain_lift_table\ngain_transformed_tbl <- gain_lift_tbl %>% \n  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n  select(-contains(\"lift\")) %>%\n  mutate(baseline = cumulative_data_fraction) %>%\n  rename(gain     = cumulative_capture_rate) %>%\n  # prepare the data for the plotting (for the color and group aesthetics)\n  pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_transformed_plot <- gain_transformed_tbl %>%\n  ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n  geom_line(size = 1.5) +\n  labs(\n    title = \"Gain Chart\",\n    x = \"Cumulative Data Fraction\",\n    y = \"Gain\"\n  ) +\n  theme_new\n\nggsave(\"gain_transformed_plot.png\", gain_transformed_plot)\n\n#> Saving 7 x 5 in image\n\ngain_transformed_plot\n\n\n\n\n\n\n# Creating the lift_transformed_table\nlift_transformed_tbl <- gain_lift_tbl %>% \n  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n  select(-contains(\"capture\")) %>%\n  mutate(baseline = 1) %>%\n  rename(lift = cumulative_lift) %>%\n  pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_transformed_plot <- lift_transformed_tbl %>%\n  ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n  geom_line(size = 1.5) +\n  labs(\n    title = \"Lift Chart\",\n    x = \"Cumulative Data Fraction\",\n    y = \"Lift\"\n  ) +\n  theme_new\n\nggsave(\"lift_transformed_plot.png\", lift_transformed_plot)\n\n#> Saving 7 x 5 in image\n\nlift_transformed_plot\n\n\n\n\n\n\n# Creating a dashboard using cowplot\n# cowplot::get_legend extracts a legend from a ggplot object\np_legend <- cowplot::get_legend(ROC_plot)\n# Remove legend from p1\nROC_plot <- ROC_plot + theme(legend.position = \"none\")\n\n# cowplot::plt_grid() combines multiple ggplots into a single cowplot object\ncowplotgrid <- cowplot::plot_grid(ROC_plot, prec_vs_recall, gain_transformed_plot, lift_transformed_plot,  ncol = 2)\nggsave(\"cowplot.png\", cowplotgrid)\n\n#> Saving 7 x 5 in image\n\n# Display cowplot\ncowplotgrid\n\n\n\n\n\n\n\nEnd of AutoML2 and Performance Measurement Challenge"
  },
  {
    "objectID": "content/01_journal/DeepLearning.html",
    "href": "content/01_journal/DeepLearning.html",
    "title": "Deep Learning",
    "section": "",
    "text": "Challenge Question:\nFor the challenge we are using tabular data instead of images. The goal is to predict customer churn using deep learning with Keras. The objective is similar to the employee churn prediction from the last session.\nCustomer churn refers to the situation when a customer ends their relationship with a company, and it’s a costly problem. Customer churn is a problem that all companies need to monitor, especially those that depend on subscription-based revenue streams. Loss of customers impacts sales. We are using the keras package to produce an Artificial Neural Network (ANN) model on the IBM Watson Telco Customer Churn Data Set! As for most business problems, it’s equally important to explain what features drive the model, which is why we’ll use the lime package for explainability. Moreover, we are going to cross-check the LIME results with a Correlation Analysis.\nCredit goes to Susan Li.\nWe need the following packages:\ntidyverse: Loads dplyr, ggplot2 etc. for data wrangling and visualization keras: Ports Keras from Python enabling deep learning in R lime: Used to explain the predictions of black box classifiers recipes: package for preprocessing machine learning data sets rsample: Package for generating resamples yardstick: Tidy methods for measuring model performance corrr: Tidy methods for correlation\nAccording to IBM, the business challenge is…\nA telecommunications company [Telco] is concerned about the number of customers leaving their landline business for cable competitors. They need to understand who is leaving. Imagine that you’re an analyst at this company and you have to find out who is leaving and why.\nThe dataset includes information about:\nChurn: Customers who left within the last month Services that each customer has signed up for (phone, internet, steaming, … ) Customer account information (duration, payment method, … ) Demographic info about customers (gender, age, … )\nCode Base: \n\n# Load the libraries\n\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(keras))\nsuppressMessages(library(lime))\nsuppressMessages(library(rsample))\nsuppressMessages(library(recipes))\nsuppressMessages(library(yardstick))\nsuppressMessages(library(corrr))\n\n# Load the data\nchurn_data_raw <- read.csv(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdml-VictorReaver1999\\\\deep_learning_challenge\\\\Customer-Churn.csv\")\n\n# View the data\nchurn_data_raw %>% glimpse()\n\n#> Rows: 7,043\n#> Columns: 21\n#> $ customerID       <chr> \"7590-VHVEG\", \"5575-GNVDE\", \"3668-QPYBK\", \"7795-CFOCW…\n#> $ gender           <chr> \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Female\",…\n#> $ SeniorCitizen    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#> $ Partner          <chr> \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes…\n#> $ Dependents       <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\"…\n#> $ tenure           <int> 1, 34, 2, 45, 2, 8, 22, 10, 28, 62, 13, 16, 58, 49, 2…\n#> $ PhoneService     <chr> \"No\", \"Yes\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", …\n#> $ MultipleLines    <chr> \"No phone service\", \"No\", \"No\", \"No phone service\", \"…\n#> $ InternetService  <chr> \"DSL\", \"DSL\", \"DSL\", \"DSL\", \"Fiber optic\", \"Fiber opt…\n#> $ OnlineSecurity   <chr> \"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"No\", \"No\", \"Yes\", \"…\n#> $ OnlineBackup     <chr> \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"N…\n#> $ DeviceProtection <chr> \"No\", \"Yes\", \"No\", \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"Y…\n#> $ TechSupport      <chr> \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"Yes…\n#> $ StreamingTV      <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"Yes\", \"No\", \"Ye…\n#> $ StreamingMovies  <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"Yes…\n#> $ Contract         <chr> \"Month-to-month\", \"One year\", \"Month-to-month\", \"One …\n#> $ PaperlessBilling <chr> \"Yes\", \"No\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", …\n#> $ PaymentMethod    <chr> \"Electronic check\", \"Mailed check\", \"Mailed check\", \"…\n#> $ MonthlyCharges   <dbl> 29.85, 56.95, 53.85, 42.30, 70.70, 99.65, 89.10, 29.7…\n#> $ TotalCharges     <dbl> 29.85, 1889.50, 108.15, 1840.75, 151.65, 820.50, 1949…\n#> $ Churn            <chr> \"No\", \"No\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", \"No\", \"Y…\n\n# Filter the data\nchurn_data_tbl <- churn_data_raw %>%\n  select(Churn, everything(), -customerID) %>%\n  tidyr::drop_na()\n\n# Split test/training sets\nset.seed(100)\ntrain_test_split <- rsample::initial_split(churn_data_tbl, prop =0.8)\ntrain_test_split\n\n#> <Training/Testing/Total>\n#> <5625/1407/7032>\n\n## <Analysis/Assess/Total>\n## <5626/1406/7032>\n\n# Retrieve train and test sets\ntrain_tbl <- training(train_test_split)\ntest_tbl  <- testing(train_test_split)\n\n# Create two plots of tenure counts, one with and the other without binning\ncounts_no_bins <- churn_data_tbl %>% ggplot(aes(x = tenure)) + \n  geom_histogram(binwidth = 0.5, fill =  \"#2DC6D6\") +\n  labs(\n    title = \"Tenure Counts Without Binning\",\n    x     = \"tenure (month)\"\n  )\n\nggsave(\"counts_no_bins.png\", counts_no_bins)\n\n#> Saving 7 x 5 in image\n\ncounts_no_bins\n\n\n\n\n\n\ncounts_6_bins <- churn_data_tbl %>% ggplot(aes(x = tenure)) + \n  geom_histogram(bins = 6, color = \"white\", fill =  \"#2DC6D6\") +\n  labs(\n    title = \"Tenure Counts With Six Bins\",\n    x     = \"tenure (month)\"\n  )\n\nggsave(\"counts_6_bins.png\", counts_6_bins)\n\n#> Saving 7 x 5 in image\n\ncounts_6_bins\n\n\n\n\n\n\n# Create a plot of total charges\ntotal_chg_plot <- churn_data_tbl %>% ggplot(aes(x = TotalCharges)) + \n  geom_histogram(bins = 100, fill =  \"#2DC6D6\") +\n  labs(\n    title = \"TotalCharges Histogram, 100 bins\",\n    x     = \"TotalCharges\"\n  )\n\nggsave(\"total_chg_plot.png\", total_chg_plot)\n\n#> Saving 7 x 5 in image\n\ntotal_chg_plot\n\n\n\n\n\n\nchurn_data_tbl_mod <- churn_data_tbl %>% \n  mutate(TotalCharges = log10(TotalCharges))\nchurn_data_tbl_mod %>% ggplot(aes(x = TotalCharges)) + \n  geom_histogram(bins = 100, fill =  \"#2DC6D6\") +\n  labs(\n    title = \"TotalCharges Histogram, 100 bins\",\n    x     = \"TotalCharges\"\n  )\n\n\n\n\n\n\n# Determine if log transformation improves correlation \n# between TotalCharges and Churn\n\ntrain_tbl %>%\n  select(Churn, TotalCharges) %>%\n  mutate(\n    Churn = Churn %>% as.factor() %>% as.numeric(),\n    LogTotalCharges = log(TotalCharges)\n  ) %>%\n  correlate() %>%\n  focus(Churn) %>%\n  fashion()\n\n#> Correlation computed with\n#> • Method: 'pearson'\n#> • Missing treated using: 'pairwise.complete.obs'\n\n\n\n\n  \n\n\nchurn_data_tbl %>% \n  pivot_longer(cols      = c(Contract, InternetService, MultipleLines, PaymentMethod), \n               names_to  = \"feature\", \n               values_to = \"category\") %>% \n  ggplot(aes(category)) +\n  geom_bar(fill = \"#2DC6D6\") +\n  facet_wrap(~ feature, scales = \"free\") +\n  labs(\n    title = \"Features with multiple categories: Need to be one-hot encoded\"\n  ) +\n  theme(axis.text.x = element_text(angle = 25, \n                                   hjust = 1))\n\n\n\n\n\n\n# Create recipe to transform our data\nrec_obj <- recipe(Churn ~ ., data = train_tbl) %>%\n  step_rm(Churn) %>% \n  step_discretize(tenure, options = list(cuts = 6)) %>%\n  step_log(TotalCharges) %>%\n  step_dummy(all_nominal(), -all_outcomes(), one_hot = T) %>%\n  step_center(all_predictors(), -all_outcomes()) %>%\n  step_scale(all_predictors(), -all_outcomes()) %>%\n  prep(data = train_tbl)\n\n# Apply the recipe\nx_train_tbl <- bake( rec_obj , new_data =  train_tbl)\nx_test_tbl  <- bake( rec_obj , new_data =  test_tbl)\n\n\ny_train_vec <- ifelse( train_tbl$Churn == \"Yes\", TRUE, FALSE )\ny_test_vec  <- ifelse( test_tbl$Churn  == \"Yes\", TRUE, FALSE)\n\n\n# Building our Artificial Neural Network\nmodel_keras <- keras_model_sequential()\n\nmodel_keras %>% \n  # First hidden layer\n  layer_dense(\n    units              = 16, \n    kernel_initializer = \"uniform\", \n    activation         = \"relu\",\n    input_shape        = ncol(x_train_tbl))%>% \n  # Dropout to prevent overfitting\n  layer_dropout(rate = 0.1) %>%\n  # Second hidden layer\n  layer_dense(\n    units              = 16, \n    kernel_initializer = \"uniform\", \n    activation         = \"relu\") %>% \n  # Dropout to prevent overfitting\n  layer_dropout(rate = 0.1) %>%\n  # Output layer\n  layer_dense(\n    units              = 1, \n    kernel_initializer = \"uniform\", \n    activation         = \"sigmoid\") %>% \n  # Compile ANN\n  compile(\n    optimizer = 'adam',\n    loss      = 'binary_crossentropy',\n    metrics   = c('accuracy')\n  )\n\nmodel_keras\n\n#> Model: \"sequential\"\n#> ________________________________________________________________________________\n#>  Layer (type)                       Output Shape                    Param #     \n#> ================================================================================\n#>  dense_2 (Dense)                    (None, 16)                      816         \n#>  dropout_1 (Dropout)                (None, 16)                      0           \n#>  dense_1 (Dense)                    (None, 16)                      272         \n#>  dropout (Dropout)                  (None, 16)                      0           \n#>  dense (Dense)                      (None, 1)                       17          \n#> ================================================================================\n#> Total params: 1,105\n#> Trainable params: 1,105\n#> Non-trainable params: 0\n#> ________________________________________________________________________________\n\n# I managed to get to this point, but ran into an error that concerns dense_2_input.\n# The rest of the code may be right or wrong, but it's hard to tell without being able to execute it.\n# In theory, it should give the results we need. In view of not being able to train the model, I have\n# decided to stop at this point. The rest of the code will be below, but it's commented out or the rendering and execution will never occur since \n# it keeps failing at the training step\n\nCode Base Part 2 (Not Working, Commented out): \n\n# x_train_mrx = as.matrix(x_train_tbl)\n# \n# ncol(x_train_tbl)\n# \n# # Fit the model\n# fit_keras <- keras::fit(\n#   object = model_keras,\n#   x = x_train_tbl,\n#   y = y_train_vec ,\n#   epochs = 35 ,\n#   batch_size = 50 ,\n#   validation_split = 0.3\n# )\n# \n# # View fit data\n# fit_keras\n# \n# plot(fit_keras) +\n#   labs(title = \"Deep Learning Training Results\") +\n#   theme(legend.position  = \"bottom\",\n#         strip.placement  = \"inside\",\n#         strip.background = element_rect(fill = \"#grey\"))\n# \n# # Predicted Class\n# yhat_keras_class_vec <- predict_classes(object = model_keras, x = as.matrix(x_test_tbl)) %>%\n#   as.vector()\n# \n# # Predicted Class Probability\n# yhat_keras_prob_vec  <- predict_proba(object = model_keras, x = as.matrix(x_test_tbl)) %>%\n#   as.vector()\n# \n# # Format test data and predictions for yardstick metrics\n# estimates_keras_tbl <- tibble(\n#   truth      = as.factor(y_test_vec) %>% fct_recode(yes = \"1\", no = \"0\"),\n#   estimate   = as.factor(yhat_keras_class_vec) %>% fct_recode(yes = \"1\", no = \"0\"),\n#   class_prob = yhat_keras_prob_vec\n# )\n# \n# estimates_keras_tbl\n# \n# # Confusion Table\n# estimates_keras_tbl %>% conf_mat(\n#   truth,\n#   estimate)\n# \n# # Accuracy\n# estimates_keras_tbl %>% accuracy(truth, estimate)\n# \n# # AUC\n# estimates_keras_tbl %>% roc_auc(\n#   data,\n#   truth,\n#   event_level = \"second\")\n# \n# # Precision\n# tibble(\n#   precision = precision(\n#     data,\n#     truth),\n#   recall    = recall(\n#     data,\n#     truth)\n# )\n# \n# # F1-Statistic\n# estimates_keras_tbl %>% f_meas(truth, estimate, beta = 1)\n# \n# class(model_keras)\n# \n# # Setup lime::model_type() function for keras\n# model_type.keras.engine.sequential.Sequential  <- function(x, ...) {\n#   return(\"classification\")\n# }\n# \n# # Setup lime::predict_model() function for keras\n# predict_model.keras.engine.sequential.Sequential <- function(x, newdata, type, ...) {\n#   pred <- predict_proba(object = x, x = as.matrix(newdata))\n#   return(data.frame(Yes = pred, No = 1 - pred))\n# }\n# \n# library(lime)\n# # Test our predict_model() function\n# predict_model(x = model_keras, newdata = x_test_tbl, type = 'raw') %>%\n#   tibble::as_tibble()\n# \n# # Run lime() on training set\n# explainer <- lime::lime(\n#   x_train_tbl,\n#   y_train_vec ,\n#   bin_continuous = FALSE)\n# \n# explanation <- lime::explain(\n#   x_test_tbl[1:10,],\n#   explainer = explainer,\n#   n_labels   = 1,\n#   n_features = 51,\n#   kernel_width   = 1)\n# \n# # Feature correlations to Churn\n# corrr_analysis <- x_train_tbl %>%\n#   mutate(Churn = y_train_vec) %>%\n#   correlate() %>%\n#   focus(Churn) %>%\n#   rename(feature = rowname) %>%\n#   arrange(abs(Churn)) %>%\n#   mutate(feature = as_factor(feature))\n# corrr_analysis\n# \n# # Correlation visualization\n# corrr_plot <- corrr_analysis %>%\n#   ggplot(aes(x = ..., y = fct_reorder(..., desc(...)))) +\n#   geom_point() +\n#   \n#   # Positive Correlations - Contribute to churn\n#   geom_segment(aes(xend = ..., yend = ...),\n#                color = \"red\",\n#                data = corrr_analysis %>% filter(... > ...)) +\n#   geom_point(color = \"red\",\n#              data = corrr_analysis %>% filter(... > ...)) +\n#   \n#   # Negative Correlations - Prevent churn\n#   geom_segment(aes(xend = 0, yend = feature),\n#                color = \"#2DC6D6\",\n#                data = ...) +\n#   geom_point(color = \"#2DC6D6\",\n#              data = ...) +\n#   \n#   # Vertical lines\n#   geom_vline(xintercept = 0, color = \"#f1fa8c\", size = 1, linetype = 2) +\n#   geom_vline( ... ) +\n#   geom_vline( ... ) +\n#   \n#   # Aesthetics\n#   labs( ... )\n# \n# # Save the plot\n# ggsave(\"corrr_plot.png\", corrr_plot)\n# \n# # View the plot\n# corrr_plot\n\nEnd of Deep Learning Challenge and BDML Course"
  },
  {
    "objectID": "content/01_journal/LIME.html",
    "href": "content/01_journal/LIME.html",
    "title": "LIME",
    "section": "",
    "text": "Challenge question:\nThis is a two part challenge:\nPart 1: Recreate plot_features(). Take the explanation data and use the first case to create a plot similar to the output of plot_features().\nSample Code\nexplanation %>% as.tibble()\ncase_1 <- explanation %>% filter(case == 1)\ncase_1 %>% plot_features()\nSample Code End\nYou will need at least the layers geom_col() and coord_flip().\nBonus Objectives:\nGet your custom plot_features() function to scale to multiple cases Use theme arguments to modify the look of the plot\nPart 2: Recreate plot_explanations():\nTake the full explanation data and recreate the second plot.\nYou will need at least the layers geom_tile() and facet_wrap().\nLIME Code Base: \n\n# Load the libraries\n\nsuppressMessages(library(h2o))\nsuppressMessages(library(recipes))\nsuppressMessages(library(readxl))\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(tidyquant))\nsuppressMessages(library(lime))\nsuppressMessages(library(rsample))\nsuppressMessages(library(knitr))\n\n\n# Create the function to process HR data and make it more readable \n# as a merged data table\nprocess_hr_data_readable <- function(data, definitions_tbl) {\n  \n  definitions_list <- definitions_tbl %>%\n    fill(...1, .direction = \"down\") %>%\n    filter(!is.na(...2)) %>%\n    separate(...2, into = c(\"key\", \"value\"), sep = \" '\", remove = TRUE) %>%\n    rename(column_name = ...1) %>%\n    mutate(key = as.numeric(key)) %>%\n    mutate(value = value %>% str_replace(pattern = \"'\", replacement = \"\")) %>%\n    split(.$column_name) %>%\n    map(~ select(., -column_name)) %>%\n    map(~ mutate(., value = as_factor(value))) \n  \n  for (i in seq_along(definitions_list)) {\n    list_name <- names(definitions_list)[i]\n    colnames(definitions_list[[i]]) <- c(list_name, paste0(list_name, \"_value\"))\n  }\n  \n  \n  data_merged_tbl <- list(HR_Data = data) %>%\n    append(definitions_list, after = 1) %>%\n    reduce(left_join) %>%\n    select(-one_of(names(definitions_list))) %>%\n    set_names(str_replace_all(names(.), pattern = \"_value\", \n                              replacement = \"\")) %>%\n    select(sort(names(.))) %>%\n    mutate_if(is.character, as.factor) %>%\n    mutate(\n      BusinessTravel = BusinessTravel %>% fct_relevel(\"Non-Travel\", \n                                                      \"Travel_Rarely\", \n                                                      \"Travel_Frequently\"),\n      MaritalStatus  = MaritalStatus %>% fct_relevel(\"Single\", \n                                                     \"Married\", \n                                                     \"Divorced\")\n    )\n  \n  return(data_merged_tbl)\n  \n}\n\n# Load the employee attrition data and raw definitions data we had from the AutoML Challenge\nemployee_attrition_tbl <- read_csv(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdml-VictorReaver1999\\\\AutoML\\\\HR-Employee-Attrition.csv\")\n\n#> Rows: 1470 Columns: 35\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\n#> dbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndefinitions_raw_tbl    <- read_excel(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdml-VictorReaver1999\\\\AutoML\\\\data_definitions.xlsx\", sheet = 1, col_names = FALSE)\n\n#> New names:\n#> • `` -> `...1`\n#> • `` -> `...2`\n\n# Run the function we created on the data we just loaded\nemployee_attrition_readable_tbl <- process_hr_data_readable(employee_attrition_tbl, definitions_raw_tbl)\n\n#> Joining with `by = join_by(Education)`\n#> Joining with `by = join_by(EnvironmentSatisfaction)`\n#> Joining with `by = join_by(JobInvolvement)`\n#> Joining with `by = join_by(JobSatisfaction)`\n#> Joining with `by = join_by(PerformanceRating)`\n#> Joining with `by = join_by(RelationshipSatisfaction)`\n#> Joining with `by = join_by(WorkLifeBalance)`\n\n# Split the data into test and train sets\nset.seed(seed = 1113)\nsplit_obj <- rsample::initial_split(employee_attrition_readable_tbl, prop = 0.85)\n\n# Assign the newly created training and test data\ntrain_readable_tbl <- training(split_obj)\ntest_readable_tbl  <- testing(split_obj)\n\n# Create a recipe (as in the Business Case)\nrecipe_obj <- recipe(Attrition ~ ., data = train_readable_tbl) %>%\n  step_zv(all_predictors()) %>%\n  step_mutate_at(c(\"JobLevel\", \"StockOptionLevel\"), fn = as.factor) %>% \n  prep()\n\n# Apply the recipe\ntrain_tbl <- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)\n\n# Initialize H2O\nh2o.init()\n\n#> \n#> H2O is not running yet, starting it now...\n#> \n#> Note:  In case of errors look at the following log files:\n#>     C:\\Users\\fvsha\\AppData\\Local\\Temp\\Rtmp0CI4VB\\file14146d902b4a/h2o_fvsha_started_from_r.out\n#>     C:\\Users\\fvsha\\AppData\\Local\\Temp\\Rtmp0CI4VB\\file1414140952fa/h2o_fvsha_started_from_r.err\n#> \n#> \n#> Starting H2O JVM and connecting:  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         1 seconds 978 milliseconds \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.4 \n#>     H2O cluster version age:    1 month and 19 days \n#>     H2O cluster name:           H2O_started_from_R_fvsha_drs368 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   3.40 GB \n#>     H2O cluster total cores:    8 \n#>     H2O cluster allowed cores:  8 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n\n# Split data into train, validate, and test for H2O\nsplit_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_tbl)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Set the target and predictors\ny <- \"Attrition\"\nx <- setdiff(names(train_h2o), y)\n\n# Run the AutoML model and save the results\nautoml_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 5 \n)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |===                                                                   |   4%\n#> 12:33:02.859: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n#> 12:33:02.871: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |=======                                                               |  11%\n  |                                                                            \n  |============                                                          |  18%\n  |                                                                            \n  |==================                                                    |  25%\n  |                                                                            \n  |=========================                                             |  36%\n  |                                                                            \n  |===============================                                       |  44%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |=========================================                             |  58%\n  |                                                                            \n  |==============================================                        |  65%\n  |                                                                            \n  |===================================================                   |  72%\n  |                                                                            \n  |==========================================================            |  82%\n  |                                                                            \n  |================================================================      |  91%\n  |                                                                            \n  |===================================================================== |  99%\n  |                                                                            \n  |======================================================================| 100%\n\n# Save the best model in the automl_leader variable\nautoml_leader <- automl_models_h2o@leader\n\n# Create the explainer as in the Business Case\nexplainer <- train_tbl %>%\n  select(-Attrition) %>%\n  lime(\n    model           = automl_leader,\n    bin_continuous  = TRUE,\n    n_bins          = 4,\n    quantile_bins   = TRUE\n  )\n\nexplainer\n\n#> $model\n#> Model Details:\n#> ==============\n#> \n#> H2OBinomialModel: deeplearning\n#> Model ID:  DeepLearning_grid_2_AutoML_1_20230616_123302_model_1 \n#> Status of Neuron Layers: predicting Attrition, 2-class classification, bernoulli distribution, CrossEntropy loss, 7,452 weights/biases, 99.2 KB, 9,306 training samples, mini-batch size 1\n#>   layer units             type dropout       l1       l2 mean_rate rate_rms\n#> 1     1    95            Input  0.00 %       NA       NA        NA       NA\n#> 2     2    50 RectifierDropout  0.00 % 0.000000 0.000000  0.170997 0.383364\n#> 3     3    50 RectifierDropout  0.00 % 0.000000 0.000000  0.015972 0.055169\n#> 4     4     2          Softmax      NA 0.000000 0.000000  0.001420 0.000616\n#>   momentum mean_weight weight_rms mean_bias bias_rms\n#> 1       NA          NA         NA        NA       NA\n#> 2 0.000000   -0.001611   0.116154  0.484475 0.038938\n#> 3 0.000000   -0.005861   0.140118  0.988933 0.018901\n#> 4 0.000000    0.000133   0.782071  0.000598 0.004340\n#> \n#> \n#> H2OBinomialMetrics: deeplearning\n#> ** Reported on training data. **\n#> ** Metrics reported on full training frame **\n#> \n#> MSE:  0.04503247\n#> RMSE:  0.2122086\n#> LogLoss:  0.1652313\n#> Mean Per-Class Error:  0.1394088\n#> AUC:  0.9608964\n#> AUCPR:  0.8790459\n#> Gini:  0.9217928\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>         No Yes    Error      Rate\n#> No     896  13 0.014301   =13/909\n#> Yes     41 114 0.264516   =41/155\n#> Totals 937 127 0.050752  =54/1064\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold      value idx\n#> 1                       max f1  0.607181   0.808511  98\n#> 2                       max f2  0.312394   0.843521 160\n#> 3                 max f0point5  0.629129   0.865533  94\n#> 4                 max accuracy  0.629129   0.949248  94\n#> 5                max precision  0.998399   1.000000   0\n#> 6                   max recall  0.010256   1.000000 371\n#> 7              max specificity  0.998399   1.000000   0\n#> 8             max absolute_mcc  0.607181   0.784732  98\n#> 9   max min_per_class_accuracy  0.259504   0.896774 175\n#> 10 max mean_per_class_accuracy  0.312394   0.912158 160\n#> 11                     max tns  0.998399 909.000000   0\n#> 12                     max fns  0.998399 154.000000   0\n#> 13                     max fps  0.000096 909.000000 399\n#> 14                     max tps  0.010256 155.000000 371\n#> 15                     max tnr  0.998399   1.000000   0\n#> 16                     max fnr  0.998399   0.993548   0\n#> 17                     max fpr  0.000096   1.000000 399\n#> 18                     max tpr  0.010256   1.000000 371\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: deeplearning\n#> ** Reported on validation data. **\n#> ** Metrics reported on full validation frame **\n#> \n#> MSE:  0.1156852\n#> RMSE:  0.3401253\n#> LogLoss:  0.3906369\n#> Mean Per-Class Error:  0.2123165\n#> AUC:  0.8508772\n#> AUCPR:  0.6673364\n#> Gini:  0.7017544\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>         No Yes    Error     Rate\n#> No     131  16 0.108844  =16/147\n#> Yes     12  26 0.315789   =12/38\n#> Totals 143  42 0.151351  =28/185\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold      value idx\n#> 1                       max f1  0.433091   0.650000  41\n#> 2                       max f2  0.081888   0.714286  85\n#> 3                 max f0point5  0.799982   0.701754  18\n#> 4                 max accuracy  0.799982   0.864865  18\n#> 5                max precision  0.995878   1.000000   0\n#> 6                   max recall  0.002843   1.000000 154\n#> 7              max specificity  0.995878   1.000000   0\n#> 8             max absolute_mcc  0.496420   0.557295  38\n#> 9   max min_per_class_accuracy  0.235401   0.763158  62\n#> 10 max mean_per_class_accuracy  0.433091   0.787683  41\n#> 11                     max tns  0.995878 147.000000   0\n#> 12                     max fns  0.995878  37.000000   0\n#> 13                     max fps  0.000036 147.000000 184\n#> 14                     max tps  0.002843  38.000000 154\n#> 15                     max tnr  0.995878   1.000000   0\n#> 16                     max fnr  0.995878   0.973684   0\n#> 17                     max fpr  0.000036   1.000000 184\n#> 18                     max tpr  0.002843   1.000000 154\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: deeplearning\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> MSE:  0.1198299\n#> RMSE:  0.3461645\n#> LogLoss:  0.4924742\n#> Mean Per-Class Error:  0.2632563\n#> AUC:  0.8002094\n#> AUCPR:  0.4879675\n#> Gini:  0.6004188\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>         No Yes    Error       Rate\n#> No     794 115 0.126513   =115/909\n#> Yes     62  93 0.400000    =62/155\n#> Totals 856 208 0.166353  =177/1064\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold      value idx\n#> 1                       max f1  0.302128   0.512397 177\n#> 2                       max f2  0.110015   0.592316 257\n#> 3                 max f0point5  0.826217   0.550285  69\n#> 4                 max accuracy  0.826217   0.875940  69\n#> 5                max precision  0.999908   1.000000   0\n#> 6                   max recall  0.000028   1.000000 399\n#> 7              max specificity  0.999908   1.000000   0\n#> 8             max absolute_mcc  0.302128   0.421199 177\n#> 9   max min_per_class_accuracy  0.087023   0.722581 272\n#> 10 max mean_per_class_accuracy  0.185530   0.748650 215\n#> 11                     max tns  0.999908 909.000000   0\n#> 12                     max fns  0.999908 150.000000   0\n#> 13                     max fps  0.000028 909.000000 399\n#> 14                     max tps  0.000028 155.000000 399\n#> 15                     max tnr  0.999908   1.000000   0\n#> 16                     max fnr  0.999908   0.967742   0\n#> 17                     max fpr  0.000028   1.000000 399\n#> 18                     max tpr  0.000028   1.000000 399\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> Cross-Validation Metrics Summary: \n#>                              mean       sd cv_1_valid cv_2_valid cv_3_valid\n#> accuracy                 0.840238 0.034750   0.863850   0.788732   0.873239\n#> auc                      0.799911 0.047737   0.726012   0.795103   0.833881\n#> err                      0.159762 0.034750   0.136150   0.211268   0.126761\n#> err_count               34.000000 7.416198  29.000000  45.000000  27.000000\n#> f0point5                 0.493705 0.063920   0.480000   0.454545   0.603448\n#> f1                       0.526964 0.060129   0.452830   0.536082   0.608696\n#> f2                       0.573626 0.091904   0.428571   0.653266   0.614035\n#> lift_top_group           5.594462 2.233563   4.896552   2.088235   6.264706\n#> logloss                  0.492720 0.075377   0.553096   0.575412   0.403313\n#> max_per_class_error      0.383901 0.134113   0.586207   0.235294   0.382353\n#> mcc                      0.446614 0.065006   0.378067   0.447802   0.533164\n#> mean_per_class_accuracy  0.746867 0.048199   0.674288   0.779001   0.769717\n#> mean_per_class_error     0.253133 0.048199   0.325712   0.220999   0.230283\n#> mse                      0.129486 0.025068   0.149327   0.159630   0.099556\n#> pr_auc                   0.472825 0.103392   0.383638   0.358091   0.608464\n#> precision                0.476737 0.077150   0.500000   0.412698   0.600000\n#> r2                      -0.046002 0.203231  -0.269646  -0.189987   0.257844\n#> recall                   0.616099 0.134113   0.413793   0.764706   0.617647\n#> rmse                     0.358480 0.034968   0.386429   0.399537   0.315525\n#> specificity              0.877636 0.056029   0.934783   0.793296   0.921788\n#>                         cv_4_valid cv_5_valid\n#> accuracy                  0.821596   0.853774\n#> auc                       0.795108   0.849449\n#> err                       0.178404   0.146226\n#> err_count                38.000000  31.000000\n#> f0point5                  0.443350   0.487179\n#> f1                        0.486486   0.550725\n#> f2                        0.538922   0.633333\n#> lift_top_group            6.870968   7.851852\n#> logloss                   0.503374   0.428407\n#> max_per_class_error       0.419355   0.296296\n#> mcc                       0.389438   0.484598\n#> mean_per_class_accuracy   0.721641   0.789690\n#> mean_per_class_error      0.278359   0.210310\n#> mse                       0.127022   0.111894\n#> pr_auc                    0.485608   0.528322\n#> precision                 0.418605   0.452381\n#> r2                       -0.021420  -0.006803\n#> recall                    0.580645   0.703704\n#> rmse                      0.356401   0.334506\n#> specificity               0.862637   0.875676\n#> \n#> $preprocess\n#> function (x) \n#> x\n#> <bytecode: 0x00000229c29608b8>\n#> <environment: 0x00000229c29706d0>\n#> \n#> $bin_continuous\n#> [1] TRUE\n#> \n#> $n_bins\n#> [1] 4\n#> \n#> $quantile_bins\n#> [1] TRUE\n#> \n#> $use_density\n#> [1] TRUE\n#> \n#> $feature_type\n#>                      Age           BusinessTravel                DailyRate \n#>                \"numeric\"                 \"factor\"                \"numeric\" \n#>               Department         DistanceFromHome                Education \n#>                 \"factor\"                \"numeric\"                 \"factor\" \n#>           EducationField           EmployeeNumber  EnvironmentSatisfaction \n#>                 \"factor\"                \"numeric\"                 \"factor\" \n#>                   Gender               HourlyRate           JobInvolvement \n#>                 \"factor\"                \"numeric\"                 \"factor\" \n#>                 JobLevel                  JobRole          JobSatisfaction \n#>                 \"factor\"                 \"factor\"                 \"factor\" \n#>            MaritalStatus            MonthlyIncome              MonthlyRate \n#>                 \"factor\"                \"numeric\"                \"numeric\" \n#>       NumCompaniesWorked                 OverTime        PercentSalaryHike \n#>                \"numeric\"                 \"factor\"                \"numeric\" \n#>        PerformanceRating RelationshipSatisfaction         StockOptionLevel \n#>                 \"factor\"                 \"factor\"                 \"factor\" \n#>        TotalWorkingYears    TrainingTimesLastYear          WorkLifeBalance \n#>                \"numeric\"                \"numeric\"                 \"factor\" \n#>           YearsAtCompany       YearsInCurrentRole  YearsSinceLastPromotion \n#>                \"numeric\"                \"numeric\"                \"numeric\" \n#>     YearsWithCurrManager \n#>                \"numeric\" \n#> \n#> $bin_cuts\n#> $bin_cuts$Age\n#>   0%  25%  50%  75% 100% \n#>   18   30   36   43   60 \n#> \n#> $bin_cuts$BusinessTravel\n#> NULL\n#> \n#> $bin_cuts$DailyRate\n#>   0%  25%  50%  75% 100% \n#>  102  465  797 1147 1499 \n#> \n#> $bin_cuts$Department\n#> NULL\n#> \n#> $bin_cuts$DistanceFromHome\n#>   0%  25%  50%  75% 100% \n#>    1    2    7   14   29 \n#> \n#> $bin_cuts$Education\n#> NULL\n#> \n#> $bin_cuts$EducationField\n#> NULL\n#> \n#> $bin_cuts$EmployeeNumber\n#>   0%  25%  50%  75% 100% \n#>    1  511 1040 1573 2065 \n#> \n#> $bin_cuts$EnvironmentSatisfaction\n#> NULL\n#> \n#> $bin_cuts$Gender\n#> NULL\n#> \n#> $bin_cuts$HourlyRate\n#>   0%  25%  50%  75% 100% \n#>   30   49   66   83  100 \n#> \n#> $bin_cuts$JobInvolvement\n#> NULL\n#> \n#> $bin_cuts$JobLevel\n#> NULL\n#> \n#> $bin_cuts$JobRole\n#> NULL\n#> \n#> $bin_cuts$JobSatisfaction\n#> NULL\n#> \n#> $bin_cuts$MaritalStatus\n#> NULL\n#> \n#> $bin_cuts$MonthlyIncome\n#>    0%   25%   50%   75%  100% \n#>  1051  2929  4908  8474 19999 \n#> \n#> $bin_cuts$MonthlyRate\n#>    0%   25%   50%   75%  100% \n#>  2094  8423 14470 20689 26968 \n#> \n#> $bin_cuts$NumCompaniesWorked\n#>   0%  25%  50%  75% 100% \n#>    0    1    2    4    9 \n#> \n#> $bin_cuts$OverTime\n#> NULL\n#> \n#> $bin_cuts$PercentSalaryHike\n#>   0%  25%  50%  75% 100% \n#>   11   12   14   18   25 \n#> \n#> $bin_cuts$PerformanceRating\n#> NULL\n#> \n#> $bin_cuts$RelationshipSatisfaction\n#> NULL\n#> \n#> $bin_cuts$StockOptionLevel\n#> NULL\n#> \n#> $bin_cuts$TotalWorkingYears\n#>   0%  25%  50%  75% 100% \n#>    0    6   10   15   38 \n#> \n#> $bin_cuts$TrainingTimesLastYear\n#>   0%  25%  50% 100% \n#>    0    2    3    6 \n#> \n#> $bin_cuts$WorkLifeBalance\n#> NULL\n#> \n#> $bin_cuts$YearsAtCompany\n#>   0%  25%  50%  75% 100% \n#>    0    3    5    9   37 \n#> \n#> $bin_cuts$YearsInCurrentRole\n#>   0%  25%  50%  75% 100% \n#>    0    2    3    7   18 \n#> \n#> $bin_cuts$YearsSinceLastPromotion\n#>   0%  50%  75% 100% \n#>    0    1    2   15 \n#> \n#> $bin_cuts$YearsWithCurrManager\n#>   0%  25%  50%  75% 100% \n#>    0    2    3    7   17 \n#> \n#> \n#> $feature_distribution\n#> $feature_distribution$Age\n#> \n#>         1         2         3         4 \n#> 0.2602082 0.2834267 0.2217774 0.2345877 \n#> \n#> $feature_distribution$BusinessTravel\n#> \n#>        Non-Travel     Travel_Rarely Travel_Frequently \n#>         0.1000801         0.7181745         0.1817454 \n#> \n#> $feature_distribution$DailyRate\n#> \n#>         1         2         3         4 \n#> 0.2514011 0.2489992 0.2497998 0.2497998 \n#> \n#> $feature_distribution$Department\n#> \n#>        Human Resources Research & Development                  Sales \n#>             0.04323459             0.65092074             0.30584468 \n#> \n#> $feature_distribution$DistanceFromHome\n#> \n#>         1         2         3         4 \n#> 0.2954363 0.2369896 0.2241793 0.2433947 \n#> \n#> $feature_distribution$Education\n#> \n#> Below College       College      Bachelor        Master        Doctor \n#>    0.11689351    0.18895116    0.38510809    0.27461970    0.03442754 \n#> \n#> $feature_distribution$EducationField\n#> \n#>  Human Resources    Life Sciences        Marketing          Medical \n#>       0.01761409       0.41793435       0.10888711       0.31144916 \n#>            Other Technical Degree \n#>       0.05444355       0.08967174 \n#> \n#> $feature_distribution$EmployeeNumber\n#> \n#>         1         2         3         4 \n#> 0.2506005 0.2497998 0.2497998 0.2497998 \n#> \n#> $feature_distribution$EnvironmentSatisfaction\n#> \n#>       Low    Medium      High Very High \n#> 0.1913531 0.1961569 0.3018415 0.3106485 \n#> \n#> $feature_distribution$Gender\n#> \n#>    Female      Male \n#> 0.4123299 0.5876701 \n#> \n#> $feature_distribution$HourlyRate\n#> \n#>         1         2         3         4 \n#> 0.2618094 0.2473979 0.2449960 0.2457966 \n#> \n#> $feature_distribution$JobInvolvement\n#> \n#>        Low     Medium       High  Very High \n#> 0.05684548 0.25780624 0.58927142 0.09607686 \n#> \n#> $feature_distribution$JobLevel\n#> \n#>          1          2          3          4          5 \n#> 0.36829464 0.36509207 0.14651721 0.07526021 0.04483587 \n#> \n#> $feature_distribution$JobRole\n#> \n#> Healthcare Representative           Human Resources     Laboratory Technician \n#>                0.08646918                0.03682946                0.18174540 \n#>                   Manager    Manufacturing Director         Research Director \n#>                0.06885508                0.09927942                0.05924740 \n#>        Research Scientist           Sales Executive      Sales Representative \n#>                0.18654924                0.22337870                0.05764612 \n#> \n#> $feature_distribution$JobSatisfaction\n#> \n#>       Low    Medium      High Very High \n#> 0.1873499 0.1985588 0.3018415 0.3122498 \n#> \n#> $feature_distribution$MaritalStatus\n#> \n#>    Single   Married  Divorced \n#> 0.3306645 0.4571657 0.2121697 \n#> \n#> $feature_distribution$MonthlyIncome\n#> \n#>         1         2         3         4 \n#> 0.2506005 0.2497998 0.2497998 0.2497998 \n#> \n#> $feature_distribution$MonthlyRate\n#> \n#>         1         2         3         4 \n#> 0.2506005 0.2497998 0.2497998 0.2497998 \n#> \n#> $feature_distribution$NumCompaniesWorked\n#> \n#>          1          2          3          4 \n#> 0.48118495 0.09927942 0.20496397 0.21457166 \n#> \n#> $feature_distribution$OverTime\n#> \n#>        No       Yes \n#> 0.7165733 0.2834267 \n#> \n#> $feature_distribution$PercentSalaryHike\n#> \n#>         1         2         3         4 \n#> 0.2866293 0.2738191 0.2289832 0.2105685 \n#> \n#> $feature_distribution$PerformanceRating\n#> \n#>         Low        Good   Excellent Outstanding \n#>   0.0000000   0.0000000   0.8414732   0.1585268 \n#> \n#> $feature_distribution$RelationshipSatisfaction\n#> \n#>       Low    Medium      High Very High \n#> 0.1889512 0.2161729 0.3018415 0.2930344 \n#> \n#> $feature_distribution$StockOptionLevel\n#> \n#>          0          1          2          3 \n#> 0.43554844 0.40592474 0.10168135 0.05684548 \n#> \n#> $feature_distribution$TotalWorkingYears\n#> \n#>         1         2         3         4 \n#> 0.3050440 0.3306645 0.1224980 0.2417934 \n#> \n#> $feature_distribution$TrainingTimesLastYear\n#> \n#>         1         2         3 \n#> 0.4603683 0.3306645 0.2089672 \n#> \n#> $feature_distribution$WorkLifeBalance\n#> \n#>        Bad       Good     Better       Best \n#> 0.05204163 0.22497998 0.61889512 0.10408327 \n#> \n#> $feature_distribution$YearsAtCompany\n#> \n#>         1         2         3         4 \n#> 0.3226581 0.2137710 0.2217774 0.2417934 \n#> \n#> $feature_distribution$YearsInCurrentRole\n#> \n#>          1          2          3          4 \n#> 0.46757406 0.08726982 0.27542034 0.16973579 \n#> \n#> $feature_distribution$YearsSinceLastPromotion\n#> \n#>         1         2         3 \n#> 0.6413131 0.1120897 0.2465973 \n#> \n#> $feature_distribution$YearsWithCurrManager\n#> \n#>          1          2          3          4 \n#> 0.46357086 0.09767814 0.25300240 0.18574860 \n#> \n#> \n#> attr(,\"class\")\n#> [1] \"data_frame_explainer\" \"explainer\"            \"list\"\n\n# Create the explanation\nexplanation <- test_tbl %>%\n  slice(1:20) %>%\n  select(-Attrition) %>%\n  lime::explain(\n    \n    # Pass our explainer object\n    explainer = explainer,\n    # Because it is a binary classification model: 1\n    n_labels   = 1,\n    # number of features to be returned\n    n_features = 8,\n    # number of localized linear models\n    n_permutations = 5000,\n    # Let's start with 1\n    kernel_width   = 1\n  )\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nexplanation\n\n\n\n  \n\n\n# Convert the explanation into a table\nexplanation %>% \n  as.tibble()\n\n#> Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#> ℹ Please use `as_tibble()` instead.\n#> ℹ The signature and semantics have changed, see `?as_tibble`.\n\n\n\n\n  \n\n\n# Filter out the 1st case\ncase_1 <- explanation %>%\n  filter(case == 1)\n\n# Extract the plot features\ncase_1 %>%\n  plot_features()\n\n\n\n\n\n\n# Plot the 1st case\ncase_1_plot <- case_1 %>%\n  ggplot(aes(y=feature_desc, x =feature_weight)) +\n  geom_col(aes(fill = feature_weight > 0)) +\n  xlab(\"Weight\") + \n  ylab(\"Feature\") +\n  scale_fill_discrete(name = \"\", labels = c(\"Contradicts\", \"Supports\")) +\n  theme(legend.position = \"bottom\")\n\nggsave(\"case_1_plot.png\", case_1_plot)\n\n#> Saving 7 x 5 in image\n\ncase_1_plot\n\n\n\n\n\n\n# Plot the explanation\nexplanation_plot <- explanation %>%\n  mutate(case = as.double(case)) %>%\n  ggplot(aes(y=feature_desc, x =case, fill = feature_weight)) +\n  geom_tile() +\n  facet_wrap(~label) \n\nggsave(\"explanation_plot.png\", explanation_plot)\n\n#> Saving 7 x 5 in image\n\nexplanation_plot\n\n\n\n\n\n\n\nEnd of LIME Challenge"
  },
  {
    "objectID": "content/01_journal/Machine_Learning_Fundamentals.html",
    "href": "content/01_journal/Machine_Learning_Fundamentals.html",
    "title": "MyLabJournal",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "content/01_journal/Machine_Learning_Fundamentals.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "content/01_journal/Machine_Learning_Fundamentals.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "MyLabJournal",
    "section": "\n5.1 Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "5.1 Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %>% glimpse()\n\n#> Rows: 1,225,765\n#> Columns: 8\n#> $ symbol   <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n#> $ date     <date> 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n#> $ open     <dbl> 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n#> $ high     <dbl> 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n#> $ low      <dbl> 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n#> $ close    <dbl> 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n#> $ volume   <dbl> 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n#> $ adjusted <dbl> 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n\n# Select specific columns\nsp_500_daily_returns_tbl <- sp_500_prices_tbl[, c(\"symbol\", \"date\", \"adjusted\")]\nsp_500_index_tbl <- sp_500_index_tbl[, c(\"symbol\", \"company\", \"sector\")]\n\n# Filtering dates starting from 2018\nsp_500_daily_returns_tbl <- sp_500_daily_returns_tbl %>%\n  filter(date >= as.Date(\"2018-01-01\"))\n\n# Computing lagged adjusted prices within each symbol\nsp_500_daily_returns_tbl <- sp_500_daily_returns_tbl %>%\n  group_by(symbol) %>%\n  mutate(lagged_adjusted = lag(adjusted)) %>%\n  na.omit()  # Removing NA values resulting from the lag operation\n\n# Computing the difference and percentage return\nsp_500_daily_returns_tbl <- sp_500_daily_returns_tbl %>%\n  mutate(diff_adjusted = adjusted - lagged_adjusted,\n         pct_return = diff_adjusted / lagged_adjusted)\n\n# Selecting final columns\nsp_500_daily_returns_tbl <- sp_500_daily_returns_tbl %>%\n  select(symbol, date, pct_return)\n\n# Saving as a variable named sp_500_daily_returns_tbl\nsp_500_daily_returns_tbl <- as_tibble(sp_500_daily_returns_tbl)"
  },
  {
    "objectID": "content/01_journal/Machine_Learning_Fundamentals.html#step-2---convert-to-user-item-format",
    "href": "content/01_journal/Machine_Learning_Fundamentals.html#step-2---convert-to-user-item-format",
    "title": "MyLabJournal",
    "section": "\n5.2 Step 2 - Convert to User-Item Format",
    "text": "5.2 Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl <- read_rds(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdml-VictorReaver1999\\\\Business Decisions with Machine Learning\\\\sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n\n# Spreading the date column and filling NAs with zeros\nstock_date_matrix_tbl <- sp_500_daily_returns_tbl %>%\n  pivot_wider(names_from = date, values_from = pct_return, values_fill = 0)\n\nhead(stock_date_matrix_tbl)"
  },
  {
    "objectID": "content/01_journal/Machine_Learning_Fundamentals.html#step-3---perform-k-means-clustering",
    "href": "content/01_journal/Machine_Learning_Fundamentals.html#step-3---perform-k-means-clustering",
    "title": "MyLabJournal",
    "section": "\n5.3 Step 3 - Perform K-Means Clustering",
    "text": "5.3 Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl <- read_rds(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdml-VictorReaver1999\\\\Business Decisions with Machine Learning\\\\stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\n\nPerform kmeans() with centers = 4 and nstart = 20\n\nSave the result as kmeans_obj\n\n\n\n# Create kmeans_obj for 4 centers\n\n# Drop the non-numeric column 'symbol'\nnumeric_data <- stock_date_matrix_tbl %>%\n  select(-symbol)\n\n# Perform K-Means clustering\nkmeans_obj <- kmeans(numeric_data, centers = 4, nstart = 20)\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss\n# Extract tot.withinss using glance()\ntot_withinss <- glance(kmeans_obj)$tot.withinss\n\n# Printi the tot.withinss value\nprint(\"total within-cluster sum of squares\")\n\n#> [1] \"total within-cluster sum of squares\"\n\nprint(tot_withinss)\n\n#> [1] 29.20555"
  },
  {
    "objectID": "content/01_journal/Machine_Learning_Fundamentals.html#step-4---find-the-optimal-value-of-k",
    "href": "content/01_journal/Machine_Learning_Fundamentals.html#step-4---find-the-optimal-value-of-k",
    "title": "MyLabJournal",
    "section": "\n5.4 Step 4 - Find the optimal value of K",
    "text": "5.4 Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n\n# 4.1\n# Define the kmeans_mapper function\nkmeans_mapper <- function(center = 3) {\n  stock_date_matrix_tbl %>%\n    select(-symbol) %>%\n    kmeans(centers = center, nstart = 20)\n}\n\n# Create a tibble with column 'centers'\nk_means_mapped_tbl <- tibble(centers = 1:30) %>%\n  # Add 'k_means' column using map() and kmeans_mapper()\n  mutate(k_means = map(centers, ~kmeans_mapper(.x))) %>%\n  # Add 'glance' column using map() and glance() function\n  mutate(glance = map(k_means, ~glance(.x)))\n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\n\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\n\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# 4.2\n# Unnest the glance column\nunnested_tbl <- k_means_mapped_tbl %>%\n  unnest(glance)\n\n# Create a Scree Plot\nscree_plot <- ggplot(unnested_tbl, aes(x = centers, y = tot.withinss)) +\n  geom_point() +\n  geom_line() +\n  labs(title = \"Scree Plot\") +\n  theme_minimal()\n\n# Display the Scree Plot\nscree_plot\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "content/01_journal/Machine_Learning_Fundamentals.html#step-5---apply-umap",
    "href": "content/01_journal/Machine_Learning_Fundamentals.html#step-5---apply-umap",
    "title": "MyLabJournal",
    "section": "\n5.5 Step 5 - Apply UMAP",
    "text": "5.5 Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdml-VictorReaver1999\\\\Business Decisions with Machine Learning\\\\k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\n\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n\n# Apply UMAP to stock_date_matrix_tbl\numap_results <- stock_date_matrix_tbl %>%\n  select(-symbol) %>%\n  umap()\n\n# Print the UMAP results\nprint(umap_results)\n\n#> umap embedding of 502 items in 2 dimensions\n#> object components: layout, data, knn, config\n\n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\n\nConvert from a matrix data type to a tibble with as_tibble()\n\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\numap_results_tbl <- umap_results$layout %>%\n  as_tibble() %>%\n  bind_cols(stock_date_matrix_tbl %>% select(symbol))\n\n#> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n#> `.name_repair` is omitted as of tibble 2.0.0.\n#> ℹ Using compatibility `.name_repair`.\n\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\n\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\numap_plot <- \n  ggplot(umap_results_tbl, aes(x = V1, y = V2)) +\n  geom_point(alpha = 0.5) +\n  theme_tq() +\n  labs(title = \"UMAP Projection\")\n\numap_plot\n\n\n\n\n\n\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "content/01_journal/Machine_Learning_Fundamentals.html#step-6---combine-k-means-and-umap",
    "href": "content/01_journal/Machine_Learning_Fundamentals.html#step-6---combine-k-means-and-umap",
    "title": "MyLabJournal",
    "section": "\n5.6 Step 6 - Combine K-Means and UMAP",
    "text": "5.6 Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdml-VictorReaver1999\\\\Business Decisions with Machine Learning\\\\k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdml-VictorReaver1999\\\\Business Decisions with Machine Learning\\\\umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# 6.1 (Pull out K-Means for 10 centers)\nk_means_obj <- kmeans(numeric_data, centers=10, nstart = 20)\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\n\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %>% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\n# 6.2 (Combine k_means_obj with umap_results_tbl)\nkmeans_stock_date_tbl <- k_means_obj %>%\n  augment(stock_date_matrix_tbl) %>%\n  select(symbol, .cluster)\n\numap_kmeans_results_tbl <- kmeans_stock_date_tbl %>% left_join(umap_results_tbl, by = \"symbol\") %>%\nleft_join(sp_500_index_tbl %>% select(symbol, company, sector), by = \"symbol\")\n\nhead(umap_kmeans_results_tbl, n = 10)\n\n\n\n  \n\n\n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\n\nUse ggplot() mapping V1, V2 and color = .cluster\n\nAdd the geom_point() geometry with alpha = 0.5\n\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %>% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\n# 6.3 (Plot the k_means and umap results)\n# Get the number of clusters\nnum_clusters <- length(unique(umap_kmeans_results_tbl$.cluster))\n\n# Define a color palette with enough colors for the clusters\nbase_palette <- RColorBrewer::brewer.pal(min(num_clusters, 12), \"Set3\")  \n\n# Create the plot\nk_means_umap_plot <- umap_kmeans_results_tbl %>%\n  ggplot(aes(x = V1, y = V2, color = factor(.cluster))) +\n  geom_point(alpha = 0.5) +\n  scale_color_manual(values = base_palette) +\n  theme_tq() +\n  labs(title = \"K-Means Clustering with UMAP Projection\")\n\nk_means_umap_plot\n\n\n\n\n\n\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/Regression.html",
    "href": "content/01_journal/Regression.html",
    "title": "Regression",
    "section": "",
    "text": "Question:In this session we did not use the recipes packages to prepare our data. This is going to be your challenge. For further information take a look at the last session or just use google. Prepare the data for the models with the steps provided below. Remember, you don’t need to set the flags by yourself (see all_nominal()).\nI. Build a model\nII. Create features with the recipes package\nIII. Bundle the model and recipe with the workflow package\nIV. Evaluate your model with the yardstick package\n\n# Load the libraries\nlibrary(tidyverse)\n\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(tidymodels)\n\n#> ── Attaching packages ────────────────────────────────────── tidymodels 1.1.0 ──\n#> ✔ broom        1.0.4     ✔ rsample      1.1.1\n#> ✔ dials        1.2.0     ✔ tune         1.1.1\n#> ✔ infer        1.0.4     ✔ workflows    1.1.3\n#> ✔ modeldata    1.1.0     ✔ workflowsets 1.0.1\n#> ✔ parsnip      1.1.0     ✔ yardstick    1.2.0\n#> ✔ recipes      1.0.6     \n#> ── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n#> ✖ scales::discard() masks purrr::discard()\n#> ✖ dplyr::filter()   masks stats::filter()\n#> ✖ recipes::fixed()  masks stringr::fixed()\n#> ✖ dplyr::lag()      masks stats::lag()\n#> ✖ yardstick::spec() masks readr::spec()\n#> ✖ recipes::step()   masks stats::step()\n#> • Dig deeper into tidy modeling with R at https://www.tmwr.org\n\nlibrary(parsnip)\nlibrary(recipes)\nlibrary(rsample)\nlibrary(yardstick)\nlibrary(rpart.plot)\n\n#> Loading required package: rpart\n#> \n#> Attaching package: 'rpart'\n#> \n#> The following object is masked from 'package:dials':\n#> \n#>     prune\n\n# Create the model\nmodel_01_linear_lm_simple <- linear_reg(mode = \"regression\") %>%\n  set_engine(\"lm\")\n\n# Load features\nbike_features_tbl <- readRDS(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdml-VictorReaver1999\\\\ds_data\\\\bike_features_tbl.rds\")\n\n# Transform the tibble\nbike_features_tbl <- bike_features_tbl %>%\n  select(model:url, `Rear Derailleur`, `Shift Lever`)\n\nbike_features_tbl <- bike_features_tbl %>% \n  mutate(\n    `shimano dura-ace`        = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano dura-ace \") %>% as.numeric(),\n    `shimano ultegra`         = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano ultegra \") %>% as.numeric(),\n    `shimano 105`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano 105 \") %>% as.numeric(),\n    `shimano tiagra`          = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano tiagra \") %>% as.numeric(),\n    `Shimano sora`            = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano sora\") %>% as.numeric(),\n    `shimano deore`           = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano deore(?! xt)\") %>% as.numeric(),\n    `shimano slx`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano slx\") %>% as.numeric(),\n    `shimano grx`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano grx\") %>% as.numeric(),\n    `Shimano xt`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano deore xt |shimano xt \") %>% as.numeric(),\n    `Shimano xtr`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano xtr\") %>% as.numeric(),\n    `Shimano saint`           = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano saint\") %>% as.numeric(),\n    `SRAM red`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram red\") %>% as.numeric(),\n    `SRAM force`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram force\") %>% as.numeric(),\n    `SRAM rival`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram rival\") %>% as.numeric(),\n    `SRAM apex`               = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram apex\") %>% as.numeric(),\n    `SRAM xx1`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram xx1\") %>% as.numeric(),\n    `SRAM x01`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram x01|sram xo1\") %>% as.numeric(),\n    `SRAM gx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram gx\") %>% as.numeric(),\n    `SRAM nx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram nx\") %>% as.numeric(),\n    `SRAM sx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram sx\") %>% as.numeric(),\n    `SRAM sx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram sx\") %>% as.numeric(),\n    `Campagnolo potenza`      = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"campagnolo potenza\") %>% as.numeric(),\n    `Campagnolo super record` = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"campagnolo super record\") %>% as.numeric(),\n    `shimano nexus`           = `Shift Lever`     %>% str_to_lower() %>% str_detect(\"shimano nexus\") %>% as.numeric(),\n    `shimano alfine`          = `Shift Lever`     %>% str_to_lower() %>% str_detect(\"shimano alfine\") %>% as.numeric()\n  ) %>% \n  # Remove original columns  \n  select(-c(`Rear Derailleur`, `Shift Lever`)) %>% \n  # Set all NAs to 0\n  mutate_if(is.numeric, ~replace(., is.na(.), 0))\n\nbike_features_tbl <- bike_features_tbl %>% set_names(str_replace_all(names(bike_features_tbl), \" |-\", \"_\"))\n\nbike_features_tbl <- bike_features_tbl %>% \n  \n  mutate(id = row_number()) %>% \n  \n  select(id, everything(), -url)\n\nbike_features_tbl %>% glimpse()\n\n#> Rows: 231\n#> Columns: 34\n#> $ id                      <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,…\n#> $ model                   <chr> \"Aeroad CF SL Disc 8.0 Di2\", \"Aeroad CF SLX Di…\n#> $ model_year              <dbl> 2020, 2020, 2020, 2020, 2020, 2019, 2019, 2021…\n#> $ frame_material          <chr> \"carbon\", \"carbon\", \"carbon\", \"carbon\", \"carbo…\n#> $ weight                  <dbl> 7.60, 7.27, 7.10, 7.73, 7.83, 6.80, 6.80, 7.60…\n#> $ price                   <dbl> 4579, 6919, 6429, 5069, 3609, 6139, 5359, 2629…\n#> $ category_1              <chr> \"Road\", \"Road\", \"Road\", \"Road\", \"Road\", \"Road\"…\n#> $ category_2              <chr> \"Race\", \"Race\", \"Race\", \"Race\", \"Race\", \"Race\"…\n#> $ category_3              <chr> \"Aeroad\", \"Aeroad\", \"Aeroad\", \"Aeroad\", \"Aeroa…\n#> $ gender                  <chr> \"unisex\", \"unisex\", \"unisex\", \"unisex\", \"unise…\n#> $ shimano_dura_ace        <dbl> 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ shimano_ultegra         <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0…\n#> $ shimano_105             <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1…\n#> $ shimano_tiagra          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0…\n#> $ Shimano_sora            <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ shimano_deore           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ shimano_slx             <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ shimano_grx             <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ Shimano_xt              <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ Shimano_xtr             <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ Shimano_saint           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ SRAM_red                <dbl> 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ SRAM_force              <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ SRAM_rival              <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ SRAM_apex               <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ SRAM_xx1                <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ SRAM_x01                <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ SRAM_gx                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ SRAM_nx                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ SRAM_sx                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ Campagnolo_potenza      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ Campagnolo_super_record <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ shimano_nexus           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ shimano_alfine          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n# Split dataset\nset.seed(seed = 1113)\nbike_split_obj <- initial_split(bike_features_tbl,prop = 0.80,\n                                strata = category_2)\n\n# Check if testing contains all category_2 values\nbike_split_obj %>% training() %>% distinct(category_2)\n\n\n\n  \n\n\nbike_split_obj %>% testing() %>% distinct(category_2)\n\n\n\n  \n\n\n# create train and test sets\ntrain_tbl <- training(bike_split_obj)\ntest_tbl <- testing(bike_split_obj)\n\n# Create recipe\nrecipe_obj <- recipe(price ~ ., data = bike_features_tbl) %>%\n  step_rm(id) %>%\n  step_dummy(all_nominal(), one_hot = TRUE) %>%\n  prep(training = train_tbl)\n\n# Create workflow\nbikes_workflow <-\n  workflow() %>%\n  add_model(model_01_linear_lm_simple) %>%\n  add_recipe(recipe_obj)\n\n# Fit the data\nbikes_fit <-\n  bikes_workflow %>%\n  fit(data = train_tbl)\n\n# Create a function to evaluate metrics\ncalc_metrics <- function(model, new_data = test_tbl) {\n\n  model %>%\n    predict(new_data = new_data) %>%\n\n    bind_cols(new_data %>% select(price)) %>%\n    yardstick::metrics(truth = price, estimate = .pred)\n\n}\n\n# Evaluate\nresults <- bikes_fit %>%\n  calc_metrics\n\n#> Warning: There are new levels in a factor: Aeroad CF SL Disc 8.0 Di2, Aeroad CF\n#> SL 7.0, Aeroad WMN CF SL 8.0, Endurace WMN AL Disc 7.0, Endurace WMN AL Disc\n#> 6.0, Endurace CF SLX Disc 9.0 Di2, Endurace CF SL Disc 8.0 Pro, Endurace CF SL\n#> Disc 8.0, Endurace WMN CF SL Disc 8.0, Endurace CF SL Disc 7.0, Endurace CF SL\n#> Disc 8.0 Di2, Endurace:ON 7.0, Inflite CF SL 8, Speedmax CF 8.0, Speedmax CF\n#> 8.0 SL, Speedmax CF SLX 9.0 SL, Speedmax CF 8.0 Di2, Speedmax WMN CF SLX 8.0\n#> SL, Speedmax WMN CF 8.0, Speedmax CF SLX 8.0 SL, Ultimate CF SL Disc 8.0 Di2,\n#> Exceed CF SLX 9, Exceed CF 7, Grail CF SL 8 eTap, Grail CF SL 8 WMN Di2, Grail\n#> 6, Grail 6 WMN, Grand Canyon 7 WMN, Grand Canyon 9, Grand Canyon:ON AL 9.0, Lux\n#> CF SLX 9.0 Team, Neuron:ON 9.0, Spectral WMN CFR 9.0, Spectral:ON CF 8.0,\n#> Spectral:ON WMN CF 7.0, Stitched 360 Pro, Strive CF 8.0, Torque AL 6.0, Torque\n#> AL 5.0, Precede:ON CF 9 ST, Roadlite:ON AL 8.0, Commuter 3.0, Roadlite 5,\n#> Roadlite AL SL 8.0, Roadlite WMN CF 8.0, Roadlite CF 7.0\n\n\n#> Warning: There are new levels in a factor: E-Road\n\n\n#> Warning: There are new levels in a factor: Endurace:ON\n\n\n#> Warning: A correlation computation is required, but the inputs are size zero or\n#> one and the standard deviation cannot be computed. `NA` will be returned.\n\nresults\n\n\n\n  \n\n\n\nEnd of Challenge"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is my Journal to document all my Machine Learning Coursework, Scripts, and Results"
  }
]