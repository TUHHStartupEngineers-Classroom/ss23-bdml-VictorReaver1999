{
  "hash": "db54a482e0b7e00f5cff3b6bc7abc1b9",
  "result": {
    "markdown": "---\ntitle: \"Regression\"\nauthor: \"Fadel Victor Shanaa\"\n---\n\n\n**Question:In this session we did not use the recipes packages to prepare our data. This is going to be your challenge. For further information take a look at the last session or just use google. Prepare the data for the models with the steps provided below. Remember, you don’t need to set the flags by yourself (see all_nominal()).**\n\n**I. Build a model**\n\n**II. Create features with the recipes package**\n\n**III. Bundle the model and recipe with the workflow package**\n\n**IV. Evaluate your model with the yardstick package**\n\n\n::: {.cell hash='Regression_cache/html/unnamed-chunk-1_2108fcdcea59192dc1f769beb01e5b60'}\n\n```{.r .cell-code}\n# Load the libraries\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Attaching packages ────────────────────────────────────── tidymodels 1.1.0 ──\n#> ✔ broom        1.0.4     ✔ rsample      1.1.1\n#> ✔ dials        1.2.0     ✔ tune         1.1.1\n#> ✔ infer        1.0.4     ✔ workflows    1.1.3\n#> ✔ modeldata    1.1.0     ✔ workflowsets 1.0.1\n#> ✔ parsnip      1.1.0     ✔ yardstick    1.2.0\n#> ✔ recipes      1.0.6     \n#> ── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n#> ✖ scales::discard() masks purrr::discard()\n#> ✖ dplyr::filter()   masks stats::filter()\n#> ✖ recipes::fixed()  masks stringr::fixed()\n#> ✖ dplyr::lag()      masks stats::lag()\n#> ✖ yardstick::spec() masks readr::spec()\n#> ✖ recipes::step()   masks stats::step()\n#> • Dig deeper into tidy modeling with R at https://www.tmwr.org\n```\n:::\n\n```{.r .cell-code}\nlibrary(parsnip)\nlibrary(recipes)\nlibrary(rsample)\nlibrary(yardstick)\nlibrary(rpart.plot)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Loading required package: rpart\n#> \n#> Attaching package: 'rpart'\n#> \n#> The following object is masked from 'package:dials':\n#> \n#>     prune\n```\n:::\n\n```{.r .cell-code}\n# Create the model\nmodel_01_linear_lm_simple <- linear_reg(mode = \"regression\") %>%\n  set_engine(\"lm\")\n\n# Load features\nbike_features_tbl <- readRDS(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdml-VictorReaver1999\\\\ds_data\\\\bike_features_tbl.rds\")\n\n# Transform the tibble\nbike_features_tbl <- bike_features_tbl %>%\n  select(model:url, `Rear Derailleur`, `Shift Lever`)\n\nbike_features_tbl <- bike_features_tbl %>% \n  mutate(\n    `shimano dura-ace`        = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano dura-ace \") %>% as.numeric(),\n    `shimano ultegra`         = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano ultegra \") %>% as.numeric(),\n    `shimano 105`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano 105 \") %>% as.numeric(),\n    `shimano tiagra`          = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano tiagra \") %>% as.numeric(),\n    `Shimano sora`            = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano sora\") %>% as.numeric(),\n    `shimano deore`           = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano deore(?! xt)\") %>% as.numeric(),\n    `shimano slx`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano slx\") %>% as.numeric(),\n    `shimano grx`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano grx\") %>% as.numeric(),\n    `Shimano xt`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano deore xt |shimano xt \") %>% as.numeric(),\n    `Shimano xtr`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano xtr\") %>% as.numeric(),\n    `Shimano saint`           = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano saint\") %>% as.numeric(),\n    `SRAM red`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram red\") %>% as.numeric(),\n    `SRAM force`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram force\") %>% as.numeric(),\n    `SRAM rival`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram rival\") %>% as.numeric(),\n    `SRAM apex`               = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram apex\") %>% as.numeric(),\n    `SRAM xx1`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram xx1\") %>% as.numeric(),\n    `SRAM x01`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram x01|sram xo1\") %>% as.numeric(),\n    `SRAM gx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram gx\") %>% as.numeric(),\n    `SRAM nx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram nx\") %>% as.numeric(),\n    `SRAM sx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram sx\") %>% as.numeric(),\n    `SRAM sx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram sx\") %>% as.numeric(),\n    `Campagnolo potenza`      = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"campagnolo potenza\") %>% as.numeric(),\n    `Campagnolo super record` = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"campagnolo super record\") %>% as.numeric(),\n    `shimano nexus`           = `Shift Lever`     %>% str_to_lower() %>% str_detect(\"shimano nexus\") %>% as.numeric(),\n    `shimano alfine`          = `Shift Lever`     %>% str_to_lower() %>% str_detect(\"shimano alfine\") %>% as.numeric()\n  ) %>% \n  # Remove original columns  \n  select(-c(`Rear Derailleur`, `Shift Lever`)) %>% \n  # Set all NAs to 0\n  mutate_if(is.numeric, ~replace(., is.na(.), 0))\n\nbike_features_tbl <- bike_features_tbl %>% set_names(str_replace_all(names(bike_features_tbl), \" |-\", \"_\"))\n\nbike_features_tbl <- bike_features_tbl %>% \n  \n  mutate(id = row_number()) %>% \n  \n  select(id, everything(), -url)\n\nbike_features_tbl %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Rows: 231\n#> Columns: 34\n#> $ id                      <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,…\n#> $ model                   <chr> \"Aeroad CF SL Disc 8.0 Di2\", \"Aeroad CF SLX Di…\n#> $ model_year              <dbl> 2020, 2020, 2020, 2020, 2020, 2019, 2019, 2021…\n#> $ frame_material          <chr> \"carbon\", \"carbon\", \"carbon\", \"carbon\", \"carbo…\n#> $ weight                  <dbl> 7.60, 7.27, 7.10, 7.73, 7.83, 6.80, 6.80, 7.60…\n#> $ price                   <dbl> 4579, 6919, 6429, 5069, 3609, 6139, 5359, 2629…\n#> $ category_1              <chr> \"Road\", \"Road\", \"Road\", \"Road\", \"Road\", \"Road\"…\n#> $ category_2              <chr> \"Race\", \"Race\", \"Race\", \"Race\", \"Race\", \"Race\"…\n#> $ category_3              <chr> \"Aeroad\", \"Aeroad\", \"Aeroad\", \"Aeroad\", \"Aeroa…\n#> $ gender                  <chr> \"unisex\", \"unisex\", \"unisex\", \"unisex\", \"unise…\n#> $ shimano_dura_ace        <dbl> 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ shimano_ultegra         <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0…\n#> $ shimano_105             <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1…\n#> $ shimano_tiagra          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0…\n#> $ Shimano_sora            <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ shimano_deore           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ shimano_slx             <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ shimano_grx             <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ Shimano_xt              <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ Shimano_xtr             <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ Shimano_saint           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ SRAM_red                <dbl> 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ SRAM_force              <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ SRAM_rival              <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ SRAM_apex               <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ SRAM_xx1                <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ SRAM_x01                <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ SRAM_gx                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ SRAM_nx                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ SRAM_sx                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ Campagnolo_potenza      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ Campagnolo_super_record <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ shimano_nexus           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ shimano_alfine          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n```\n:::\n\n```{.r .cell-code}\n# Split dataset\nset.seed(seed = 1113)\nbike_split_obj <- initial_split(bike_features_tbl,prop = 0.80,\n                                strata = category_2)\n\n# Check if testing contains all category_2 values\nbike_split_obj %>% training() %>% distinct(category_2)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"category_2\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Race\"},{\"1\":\"Endurance\"},{\"1\":\"Cyclocross\"},{\"1\":\"Triathlon Bike\"},{\"1\":\"Fat Bikes\"},{\"1\":\"Cross-Country\"},{\"1\":\"Adventure\"},{\"1\":\"All-Road\"},{\"1\":\"E-Gravel\"},{\"1\":\"E-Mountain\"},{\"1\":\"Downhill\"},{\"1\":\"Dirt Jump\"},{\"1\":\"Enduro\"},{\"1\":\"E-City\"},{\"1\":\"E-Trekking\"},{\"1\":\"E-Fitness\"},{\"1\":\"City\"},{\"1\":\"Touring\"},{\"1\":\"Trail\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nbike_split_obj %>% testing() %>% distinct(category_2)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"category_2\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Race\"},{\"1\":\"Endurance\"},{\"1\":\"E-Road\"},{\"1\":\"Cyclocross\"},{\"1\":\"Triathlon Bike\"},{\"1\":\"Cross-Country\"},{\"1\":\"All-Road\"},{\"1\":\"Trail\"},{\"1\":\"E-Mountain\"},{\"1\":\"Dirt Jump\"},{\"1\":\"Enduro\"},{\"1\":\"E-City\"},{\"1\":\"E-Fitness\"},{\"1\":\"City\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n# create train and test sets\ntrain_tbl <- training(bike_split_obj)\ntest_tbl <- testing(bike_split_obj)\n\n# Create recipe\nrecipe_obj <- recipe(price ~ ., data = bike_features_tbl) %>%\n  step_rm(id) %>%\n  step_dummy(all_nominal(), one_hot = TRUE) %>%\n  prep(training = train_tbl)\n\n# Create workflow\nbikes_workflow <-\n  workflow() %>%\n  add_model(model_01_linear_lm_simple) %>%\n  add_recipe(recipe_obj)\n\n# Fit the data\nbikes_fit <-\n  bikes_workflow %>%\n  fit(data = train_tbl)\n\n# Create a function to evaluate metrics\ncalc_metrics <- function(model, new_data = test_tbl) {\n\n  model %>%\n    predict(new_data = new_data) %>%\n\n    bind_cols(new_data %>% select(price)) %>%\n    yardstick::metrics(truth = price, estimate = .pred)\n\n}\n\n# Evaluate\nresults <- bikes_fit %>%\n  calc_metrics\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: There are new levels in a factor: Aeroad CF SL Disc 8.0 Di2, Aeroad CF\n#> SL 7.0, Aeroad WMN CF SL 8.0, Endurace WMN AL Disc 7.0, Endurace WMN AL Disc\n#> 6.0, Endurace CF SLX Disc 9.0 Di2, Endurace CF SL Disc 8.0 Pro, Endurace CF SL\n#> Disc 8.0, Endurace WMN CF SL Disc 8.0, Endurace CF SL Disc 7.0, Endurace CF SL\n#> Disc 8.0 Di2, Endurace:ON 7.0, Inflite CF SL 8, Speedmax CF 8.0, Speedmax CF\n#> 8.0 SL, Speedmax CF SLX 9.0 SL, Speedmax CF 8.0 Di2, Speedmax WMN CF SLX 8.0\n#> SL, Speedmax WMN CF 8.0, Speedmax CF SLX 8.0 SL, Ultimate CF SL Disc 8.0 Di2,\n#> Exceed CF SLX 9, Exceed CF 7, Grail CF SL 8 eTap, Grail CF SL 8 WMN Di2, Grail\n#> 6, Grail 6 WMN, Grand Canyon 7 WMN, Grand Canyon 9, Grand Canyon:ON AL 9.0, Lux\n#> CF SLX 9.0 Team, Neuron:ON 9.0, Spectral WMN CFR 9.0, Spectral:ON CF 8.0,\n#> Spectral:ON WMN CF 7.0, Stitched 360 Pro, Strive CF 8.0, Torque AL 6.0, Torque\n#> AL 5.0, Precede:ON CF 9 ST, Roadlite:ON AL 8.0, Commuter 3.0, Roadlite 5,\n#> Roadlite AL SL 8.0, Roadlite WMN CF 8.0, Roadlite CF 7.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: There are new levels in a factor: E-Road\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: There are new levels in a factor: Endurace:ON\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: A correlation computation is required, but the inputs are size zero or\n#> one and the standard deviation cannot be computed. `NA` will be returned.\n```\n:::\n\n```{.r .cell-code}\nresults\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\".metric\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\".estimator\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\".estimate\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"rmse\",\"2\":\"standard\",\"3\":\"NaN\"},{\"1\":\"rsq\",\"2\":\"standard\",\"3\":\"NA\"},{\"1\":\"mae\",\"2\":\"standard\",\"3\":\"NaN\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n**End of Challenge**",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}