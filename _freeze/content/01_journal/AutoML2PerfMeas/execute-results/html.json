{
  "hash": "04b804709006dfafd29c7b08aa4881e8",
  "result": {
    "markdown": "---\ntitle: \"AutoML Part 2 and Performance Measures\"\nauthor: \"Fadel Victor Shanaa\"\n---\n\n\n**AutoML Part 2 Challenge:** \n\nFor the challenge, we shall be working with a Product Backorders dataset. The goal here is to predict whether or not a product will be put on backorder status, given a number of product metrics such as current inventory, transit time, demand forecasts and prior sales. It’s a classic Binary Classification problem. \n\n**Steps:**\n\n1. Load the training & test dataset\n2. Specifiy the response and predictor variables\n3. Run AutoML specifying the stopping criterion\n4. View the leaderboard\n5. Predicting using Leader Model\n6. Save the leader model\n\n**Performance Measures Challenge:**\n\nApply all the steps you have learned in this session on the dataset from challenge of the last session (Product Backorders):\n\n**Steps:**\n\n1. Leaderboard visualization\n2. Tune a model with grid search\n3. Visualize the trade of between the precision and the recall and the optimal threshold\n4. ROC Plot\n5. Precision vs Recall Plot\n6. Gain Plot\n7. Lift Plot\n8. Dashboard with cowplot\n\n\n\n**AutoML Part 2 and Performance Measures Code Base**\n\n\n::: {.cell hash='AutoML2PerfMeas_cache/html/unnamed-chunk-1_276cea1f08262e66497a97813d24baac'}\n\n```{.r .cell-code}\n# Load the libraries\n\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(GGally))\nsuppressMessages(library(h2o))\nsuppressMessages(library(recipes))\nsuppressMessages(library(rsample))\nsuppressMessages(library(knitr))\nsuppressMessages(library(cowplot))\nsuppressMessages(library(glue))\n\n# Load the dataset\nproduct_backorders_tbl <- read_csv(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdml-VictorReaver1999\\\\PerfMeas\\\\product_backorders.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 19053 Columns: 23\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr  (7): potential_issue, deck_risk, oe_constraint, ppap_risk, stop_auto_bu...\n#> dbl (16): sku, national_inv, lead_time, in_transit_qty, forecast_3_month, fo...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nproduct_backorders_tbl %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Rows: 19,053\n#> Columns: 23\n#> $ sku               <dbl> 1113121, 1113268, 1113874, 1114222, 1114823, 1115453…\n#> $ national_inv      <dbl> 0, 0, 20, 0, 0, 55, -34, 4, 2, -7, 1, 2, 0, 0, 0, 0,…\n#> $ lead_time         <dbl> 8, 8, 2, 8, 12, 8, 8, 9, 8, 8, 8, 8, 12, 2, 12, 4, 2…\n#> $ in_transit_qty    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0…\n#> $ forecast_3_month  <dbl> 6, 2, 45, 9, 31, 216, 120, 43, 4, 56, 2, 5, 5, 54, 4…\n#> $ forecast_6_month  <dbl> 6, 3, 99, 14, 31, 360, 240, 67, 6, 96, 4, 9, 6, 72, …\n#> $ forecast_9_month  <dbl> 6, 4, 153, 21, 31, 492, 240, 115, 9, 112, 6, 13, 9, …\n#> $ sales_1_month     <dbl> 0, 1, 16, 5, 7, 30, 83, 5, 1, 13, 0, 1, 0, 0, 1, 0, …\n#> $ sales_3_month     <dbl> 4, 2, 42, 17, 15, 108, 122, 22, 5, 30, 2, 5, 4, 0, 3…\n#> $ sales_6_month     <dbl> 9, 3, 80, 36, 33, 275, 144, 40, 6, 56, 3, 8, 5, 0, 4…\n#> $ sales_9_month     <dbl> 12, 3, 111, 43, 47, 340, 165, 58, 9, 76, 4, 11, 6, 0…\n#> $ min_bank          <dbl> 0, 0, 10, 0, 2, 51, 33, 4, 2, 0, 0, 0, 3, 4, 0, 0, 0…\n#> $ potential_issue   <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ pieces_past_due   <dbl> 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ perf_6_month_avg  <dbl> 0.90, 0.96, 0.81, 0.96, 0.98, 0.00, 1.00, 0.69, 1.00…\n#> $ perf_12_month_avg <dbl> 0.89, 0.97, 0.88, 0.98, 0.98, 0.00, 0.97, 0.68, 0.95…\n#> $ local_bo_qty      <dbl> 0, 0, 0, 0, 0, 0, 34, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, …\n#> $ deck_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ oe_constraint     <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ ppap_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No…\n#> $ stop_auto_buy     <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n#> $ rev_stop          <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ went_on_backorder <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n```\n:::\n\n```{.r .cell-code}\n# Create data pre-processing recipe and convert certain variables to factors\nrecipe_obj <- recipe(went_on_backorder ~ ., data = product_backorders_tbl) %>%\n  step_zv(all_predictors()) %>%\n  step_mutate_at(potential_issue, deck_risk, oe_constraint, ppap_risk, stop_auto_buy, rev_stop, fn = as.factor) %>%\n  prep()\n\n# recipe_obj\n\n# Split the dataset into train and test\nset.seed(1234)\n\nsplit_obj <- initial_split(product_backorders_tbl, prop = 0.85)\ntrain_readable_tbl <- training(split_obj)\ntest_readable_tbl <- testing(split_obj)\n\n# Pre-process it using the recipe\ntrain_tbl <- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)\n\n# Initialize the H2O package\nh2o.init()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n#> H2O is not running yet, starting it now...\n#> \n#> Note:  In case of errors look at the following log files:\n#>     C:\\Users\\fvsha\\AppData\\Local\\Temp\\RtmpsTFGrg\\file30044ac8ba0/h2o_fvsha_started_from_r.out\n#>     C:\\Users\\fvsha\\AppData\\Local\\Temp\\RtmpsTFGrg\\file30047b2c34bb/h2o_fvsha_started_from_r.err\n#> \n#> \n#> Starting H2O JVM and connecting:  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         2 seconds 22 milliseconds \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.4 \n#>     H2O cluster version age:    1 month and 18 days \n#>     H2O cluster name:           H2O_started_from_R_fvsha_pgz902 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   3.40 GB \n#>     H2O cluster total cores:    8 \n#>     H2O cluster allowed cores:  8 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n```\n:::\n\n```{.r .cell-code}\n# Use H2O to split train set into train and val set\nsplit_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\ntrain_h2o <- split_h2o[[1]] \nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\ny <- \"went_on_backorder\" # Target variable\nx <- setdiff(names(train_h2o), y) # Assign predictor variables\n\n# Initialize the automl process and specify the cross validation folds and \n# the leaderboard dataset\nautoml_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 120,\n  nfolds            = 5\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=                                                                     |   1%\n#> 10:01:29.461: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n#> 10:01:29.476: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |==                                                                    |   3%\n  |                                                                            \n  |===                                                                   |   5%\n  |                                                                            \n  |====                                                                  |   6%\n  |                                                                            \n  |======                                                                |   8%\n  |                                                                            \n  |=======                                                               |  10%\n  |                                                                            \n  |========                                                              |  12%\n  |                                                                            \n  |==========                                                            |  14%\n  |                                                                            \n  |===========                                                           |  15%\n  |                                                                            \n  |============                                                          |  17%\n  |                                                                            \n  |=============                                                         |  19%\n  |                                                                            \n  |==============                                                        |  21%\n  |                                                                            \n  |================                                                      |  22%\n  |                                                                            \n  |=================                                                     |  24%\n  |                                                                            \n  |==================                                                    |  26%\n  |                                                                            \n  |===================                                                   |  28%\n  |                                                                            \n  |====================                                                  |  29%\n  |                                                                            \n  |======================                                                |  31%\n  |                                                                            \n  |=======================                                               |  33%\n  |                                                                            \n  |========================                                              |  34%\n  |                                                                            \n  |=========================                                             |  36%\n  |                                                                            \n  |===========================                                           |  38%\n  |                                                                            \n  |============================                                          |  40%\n  |                                                                            \n  |=============================                                         |  41%\n  |                                                                            \n  |==============================                                        |  43%\n  |                                                                            \n  |===============================                                       |  45%\n  |                                                                            \n  |=================================                                     |  47%\n  |                                                                            \n  |==================================                                    |  48%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |====================================                                  |  52%\n  |                                                                            \n  |=====================================                                 |  54%\n  |                                                                            \n  |=======================================                               |  55%\n  |                                                                            \n  |========================================                              |  57%\n  |                                                                            \n  |=========================================                             |  59%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |============================================                          |  62%\n  |                                                                            \n  |=============================================                         |  64%\n  |                                                                            \n  |==============================================                        |  66%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |================================================                      |  69%\n  |                                                                            \n  |==================================================                    |  71%\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |==========================================================            |  83%\n  |                                                                            \n  |===========================================================           |  85%\n  |                                                                            \n  |==============================================================        |  89%\n  |                                                                            \n  |================================================================      |  91%\n  |                                                                            \n  |=================================================================     |  93%\n  |                                                                            \n  |==================================================================    |  95%\n  |                                                                            \n  |===================================================================   |  96%\n  |                                                                            \n  |===================================================================== |  99%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\ntypeof(automl_models_h2o)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"S4\"\n```\n:::\n\n```{.r .cell-code}\nslotNames(automl_models_h2o)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"project_name\"   \"leader\"         \"leaderboard\"    \"event_log\"     \n#> [5] \"modeling_steps\" \"training_info\"\n```\n:::\n\n```{.r .cell-code}\nautoml_models_h2o@leaderboard\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>                                                  model_id       auc   logloss\n#> 1    StackedEnsemble_AllModels_3_AutoML_1_20230616_100129 0.9559137 0.1700202\n#> 2    StackedEnsemble_AllModels_2_AutoML_1_20230616_100129 0.9542343 0.1710901\n#> 3    StackedEnsemble_AllModels_1_AutoML_1_20230616_100129 0.9536078 0.1734787\n#> 4 StackedEnsemble_BestOfFamily_4_AutoML_1_20230616_100129 0.9533307 0.1718307\n#> 5 StackedEnsemble_BestOfFamily_3_AutoML_1_20230616_100129 0.9533302 0.1718538\n#> 6 StackedEnsemble_BestOfFamily_2_AutoML_1_20230616_100129 0.9532188 0.1751266\n#>       aucpr mean_per_class_error      rmse        mse\n#> 1 0.7681372            0.1367904 0.2271157 0.05158152\n#> 2 0.7665611            0.1447287 0.2273710 0.05169758\n#> 3 0.7568165            0.1429130 0.2286106 0.05226282\n#> 4 0.7668508            0.1256201 0.2277665 0.05187758\n#> 5 0.7666942            0.1256201 0.2277812 0.05188426\n#> 6 0.7563868            0.1477804 0.2297528 0.05278636\n#> \n#> [35 rows x 7 columns]\n```\n:::\n\n```{.r .cell-code}\nautoml_models_h2o@leader\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Model Details:\n#> ==============\n#> \n#> H2OBinomialModel: stackedensemble\n#> Model ID:  StackedEnsemble_AllModels_3_AutoML_1_20230616_100129 \n#> Model Summary for Stacked Ensemble: \n#>                                          key            value\n#> 1                          Stacking strategy cross_validation\n#> 2       Number of base models (used / total)            11/27\n#> 3           # GBM base models (used / total)             9/19\n#> 4           # DRF base models (used / total)              1/2\n#> 5  # DeepLearning base models (used / total)              1/5\n#> 6           # GLM base models (used / total)              0/1\n#> 7                      Metalearner algorithm              GLM\n#> 8         Metalearner fold assignment scheme           Random\n#> 9                         Metalearner nfolds                5\n#> 10                   Metalearner fold_column               NA\n#> 11        Custom metalearner hyperparameters             None\n#> \n#> \n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on training data. **\n#> \n#> MSE:  0.02250138\n#> RMSE:  0.1500046\n#> LogLoss:  0.08666954\n#> Mean Per-Class Error:  0.07208893\n#> AUC:  0.992294\n#> AUCPR:  0.9582933\n#> Gini:  0.9845879\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No  Yes    Error        Rate\n#> No     8736  117 0.013216   =117/8853\n#> Yes     162 1075 0.130962   =162/1237\n#> Totals 8898 1192 0.027651  =279/10090\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.463641    0.885138 173\n#> 2                       max f2  0.249688    0.908530 232\n#> 3                 max f0point5  0.677075    0.916617 119\n#> 4                 max accuracy  0.505843    0.972349 161\n#> 5                max precision  0.993095    1.000000   0\n#> 6                   max recall  0.020770    1.000000 352\n#> 7              max specificity  0.993095    1.000000   0\n#> 8             max absolute_mcc  0.463641    0.869619 173\n#> 9   max min_per_class_accuracy  0.237222    0.955538 236\n#> 10 max mean_per_class_accuracy  0.237222    0.956194 236\n#> 11                     max tns  0.993095 8853.000000   0\n#> 12                     max fns  0.993095 1235.000000   0\n#> 13                     max fps  0.000283 8853.000000 399\n#> 14                     max tps  0.020770 1237.000000 352\n#> 15                     max tnr  0.993095    1.000000   0\n#> 16                     max fnr  0.993095    0.998383   0\n#> 17                     max fpr  0.000283    1.000000 399\n#> 18                     max tpr  0.020770    1.000000 352\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on validation data. **\n#> \n#> MSE:  0.04359992\n#> RMSE:  0.2088059\n#> LogLoss:  0.1466714\n#> Mean Per-Class Error:  0.141584\n#> AUC:  0.9629414\n#> AUCPR:  0.7861797\n#> Gini:  0.9258829\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No Yes    Error       Rate\n#> No     2044  85 0.039925   =85/2129\n#> Yes      63 196 0.243243    =63/259\n#> Totals 2107 281 0.061977  =148/2388\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.407494    0.725926 164\n#> 2                       max f2  0.246740    0.795129 210\n#> 3                 max f0point5  0.694115    0.762355  92\n#> 4                 max accuracy  0.686517    0.940955  95\n#> 5                max precision  0.981880    1.000000   0\n#> 6                   max recall  0.014337    1.000000 358\n#> 7              max specificity  0.981880    1.000000   0\n#> 8             max absolute_mcc  0.407494    0.691783 164\n#> 9   max min_per_class_accuracy  0.146902    0.899953 251\n#> 10 max mean_per_class_accuracy  0.094945    0.904396 279\n#> 11                     max tns  0.981880 2129.000000   0\n#> 12                     max fns  0.981880  258.000000   0\n#> 13                     max fps  0.000208 2129.000000 399\n#> 14                     max tps  0.014337  259.000000 358\n#> 15                     max tnr  0.981880    1.000000   0\n#> 16                     max fnr  0.981880    0.996139   0\n#> 17                     max fpr  0.000208    1.000000 399\n#> 18                     max tpr  0.014337    1.000000 358\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> MSE:  0.04982626\n#> RMSE:  0.223218\n#> LogLoss:  0.1684217\n#> Mean Per-Class Error:  0.1657596\n#> AUC:  0.952705\n#> AUCPR:  0.755486\n#> Gini:  0.90541\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>           No  Yes    Error        Rate\n#> No     11695  458 0.037686  =458/12153\n#> Yes      486 1168 0.293833   =486/1654\n#> Totals 12181 1626 0.068371  =944/13807\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold        value idx\n#> 1                       max f1  0.412844     0.712195 186\n#> 2                       max f2  0.131430     0.779423 284\n#> 3                 max f0point5  0.587964     0.746984 133\n#> 4                 max accuracy  0.525838     0.933874 152\n#> 5                max precision  0.990784     1.000000   0\n#> 6                   max recall  0.001353     1.000000 396\n#> 7              max specificity  0.990784     1.000000   0\n#> 8             max absolute_mcc  0.412844     0.673436 186\n#> 9   max min_per_class_accuracy  0.114758     0.885954 292\n#> 10 max mean_per_class_accuracy  0.091380     0.890806 304\n#> 11                     max tns  0.990784 12153.000000   0\n#> 12                     max fns  0.990784  1653.000000   0\n#> 13                     max fps  0.000276 12153.000000 399\n#> 14                     max tps  0.001353  1654.000000 396\n#> 15                     max tnr  0.990784     1.000000   0\n#> 16                     max fnr  0.990784     0.999395   0\n#> 17                     max fpr  0.000276     1.000000 399\n#> 18                     max tpr  0.001353     1.000000 396\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> Cross-Validation Metrics Summary: \n#>                 mean        sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#> accuracy    0.931507  0.003934   0.927676   0.935239   0.927872   0.935935\n#> auc         0.952590  0.007786   0.958352   0.959613   0.953138   0.939975\n#> err         0.068493  0.003934   0.072324   0.064761   0.072128   0.064065\n#> err_count 189.200000 12.275992 202.000000 179.000000 199.000000 174.000000\n#> f0point5    0.713392  0.020416   0.686176   0.728261   0.709261   0.738255\n#>           cv_5_valid\n#> accuracy    0.930811\n#> auc         0.951873\n#> err         0.069189\n#> err_count 192.000000\n#> f0point5    0.705009\n#> \n#> ---\n#>                         mean        sd cv_1_valid cv_2_valid cv_3_valid\n#> precision           0.712170  0.039203   0.660194   0.714667   0.709677\n#> r2                  0.527052  0.028772   0.541437   0.567201   0.525608\n#> recall              0.728867  0.072980   0.814371   0.788235   0.707602\n#> residual_deviance 929.185060 40.221832 899.525600 874.595030 949.708300\n#> rmse                0.223138  0.004977   0.219726   0.216078   0.226970\n#> specificity         0.958927  0.011610   0.943066   0.955858   0.959040\n#>                   cv_4_valid cv_5_valid\n#> precision           0.770428   0.705882\n#> r2                  0.494134   0.506882\n#> recall              0.632588   0.701538\n#> residual_deviance 969.984130 952.112300\n#> rmse                0.227110   0.225807\n#> specificity         0.975447   0.961225\n```\n:::\n\n```{.r .cell-code}\ntypeof(automl_models_h2o@leader)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"S4\"\n```\n:::\n\n```{.r .cell-code}\n# Predict using H2O and save output as table\npredictions <- h2o.predict(automl_models_h2o@leader, newdata = as.h2o(test_tbl))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\npredictions_tbl <-\n  predictions %>%\n  as_tibble()\n\n# Save the resulting model in the current working directory\n# h2o.saveModel(automl_models_h2o@leader, path=\"saved_model/\")\n\n# End of AutoML2\n\n\n# Start of Performance Measures\n# Tasks:\n# 1. Leaderboard visualization\n# 2. Tune a model with grid search\n# 3. Visualize the trade of between the precision and the recall and the optimal threshold\n# 4. ROC Plot\n# 5. Precision vs Recall Plot\n# 6. Gain Plot\n# 7. Lift Plot\n# 8. Dashboard with cowplot\n\n# Leaderboard visualization\n\n# View the predictions table\npredictions_tbl %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Rows: 2,858\n#> Columns: 3\n#> $ predict <fct> Yes, Yes, Yes, Yes, Yes, Yes, No, No, Yes, Yes, Yes, Yes, No, …\n#> $ No      <dbl> 0.33526212, 0.52960722, 0.08328559, 0.12223489, 0.08851156, 0.…\n#> $ Yes     <dbl> 0.66473788, 0.47039278, 0.91671441, 0.87776511, 0.91148844, 0.…\n```\n:::\n\n```{.r .cell-code}\n# Exclude certain metrics from leaderboard\nautoml_models_h2o@leaderboard %>% \n  as_tibble() %>% \n  select(-c(mean_per_class_error, rmse, mse))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"model_id\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"auc\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"logloss\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"aucpr\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"StackedEnsemble_AllModels_3_AutoML_1_20230616_100129\",\"2\":\"0.9559137\",\"3\":\"0.1700202\",\"4\":\"0.7681372\"},{\"1\":\"StackedEnsemble_AllModels_2_AutoML_1_20230616_100129\",\"2\":\"0.9542343\",\"3\":\"0.1710901\",\"4\":\"0.7665611\"},{\"1\":\"StackedEnsemble_AllModels_1_AutoML_1_20230616_100129\",\"2\":\"0.9536078\",\"3\":\"0.1734787\",\"4\":\"0.7568165\"},{\"1\":\"StackedEnsemble_BestOfFamily_4_AutoML_1_20230616_100129\",\"2\":\"0.9533307\",\"3\":\"0.1718307\",\"4\":\"0.7668508\"},{\"1\":\"StackedEnsemble_BestOfFamily_3_AutoML_1_20230616_100129\",\"2\":\"0.9533302\",\"3\":\"0.1718538\",\"4\":\"0.7666942\"},{\"1\":\"StackedEnsemble_BestOfFamily_2_AutoML_1_20230616_100129\",\"2\":\"0.9532188\",\"3\":\"0.1751266\",\"4\":\"0.7563868\"},{\"1\":\"GBM_3_AutoML_1_20230616_100129\",\"2\":\"0.9514484\",\"3\":\"0.1789496\",\"4\":\"0.7544673\"},{\"1\":\"GBM_grid_1_AutoML_1_20230616_100129_model_8\",\"2\":\"0.9513262\",\"3\":\"0.1784326\",\"4\":\"0.7405322\"},{\"1\":\"GBM_grid_1_AutoML_1_20230616_100129_model_11\",\"2\":\"0.9509383\",\"3\":\"0.1804109\",\"4\":\"0.7424480\"},{\"1\":\"GBM_4_AutoML_1_20230616_100129\",\"2\":\"0.9499076\",\"3\":\"0.1800465\",\"4\":\"0.7391653\"},{\"1\":\"GBM_2_AutoML_1_20230616_100129\",\"2\":\"0.9490916\",\"3\":\"0.1825742\",\"4\":\"0.7422188\"},{\"1\":\"GBM_grid_1_AutoML_1_20230616_100129_model_4\",\"2\":\"0.9489288\",\"3\":\"0.1832758\",\"4\":\"0.7433483\"},{\"1\":\"StackedEnsemble_BestOfFamily_1_AutoML_1_20230616_100129\",\"2\":\"0.9483396\",\"3\":\"0.1796816\",\"4\":\"0.7428179\"},{\"1\":\"GBM_1_AutoML_1_20230616_100129\",\"2\":\"0.9483368\",\"3\":\"0.1801938\",\"4\":\"0.7425475\"},{\"1\":\"GBM_grid_1_AutoML_1_20230616_100129_model_5\",\"2\":\"0.9476249\",\"3\":\"0.1835235\",\"4\":\"0.7432538\"},{\"1\":\"GBM_grid_1_AutoML_1_20230616_100129_model_3\",\"2\":\"0.9474445\",\"3\":\"0.1856744\",\"4\":\"0.7369720\"},{\"1\":\"GBM_5_AutoML_1_20230616_100129\",\"2\":\"0.9473195\",\"3\":\"0.1871406\",\"4\":\"0.7302796\"},{\"1\":\"GBM_grid_1_AutoML_1_20230616_100129_model_10\",\"2\":\"0.9467049\",\"3\":\"0.1892671\",\"4\":\"0.7369853\"},{\"1\":\"GBM_grid_1_AutoML_1_20230616_100129_model_13\",\"2\":\"0.9452998\",\"3\":\"0.1977490\",\"4\":\"0.7262626\"},{\"1\":\"GBM_grid_1_AutoML_1_20230616_100129_model_6\",\"2\":\"0.9435158\",\"3\":\"0.1917843\",\"4\":\"0.7187987\"},{\"1\":\"XRT_1_AutoML_1_20230616_100129\",\"2\":\"0.9422260\",\"3\":\"0.2104066\",\"4\":\"0.7481025\"},{\"1\":\"GBM_grid_1_AutoML_1_20230616_100129_model_12\",\"2\":\"0.9409391\",\"3\":\"0.1986967\",\"4\":\"0.6981357\"},{\"1\":\"GBM_grid_1_AutoML_1_20230616_100129_model_2\",\"2\":\"0.9401921\",\"3\":\"0.2076646\",\"4\":\"0.6925261\"},{\"1\":\"GBM_grid_1_AutoML_1_20230616_100129_model_7\",\"2\":\"0.9386592\",\"3\":\"0.2102546\",\"4\":\"0.6852529\"},{\"1\":\"DRF_1_AutoML_1_20230616_100129\",\"2\":\"0.9325428\",\"3\":\"0.2309348\",\"4\":\"0.6811470\"},{\"1\":\"GBM_grid_1_AutoML_1_20230616_100129_model_1\",\"2\":\"0.9304151\",\"3\":\"0.2116839\",\"4\":\"0.6611795\"},{\"1\":\"GBM_grid_1_AutoML_1_20230616_100129_model_9\",\"2\":\"0.9245831\",\"3\":\"0.2267381\",\"4\":\"0.6448612\"},{\"1\":\"DeepLearning_grid_1_AutoML_1_20230616_100129_model_1\",\"2\":\"0.8981951\",\"3\":\"0.2800684\",\"4\":\"0.5585304\"},{\"1\":\"GBM_grid_1_AutoML_1_20230616_100129_model_14\",\"2\":\"0.8892922\",\"3\":\"0.3099713\",\"4\":\"0.5593224\"},{\"1\":\"DeepLearning_1_AutoML_1_20230616_100129\",\"2\":\"0.7769187\",\"3\":\"0.3325796\",\"4\":\"0.3378544\"},{\"1\":\"GLM_1_AutoML_1_20230616_100129\",\"2\":\"0.7744296\",\"3\":\"0.3255324\",\"4\":\"0.3126565\"},{\"1\":\"DeepLearning_grid_1_AutoML_1_20230616_100129_model_4\",\"2\":\"0.7683455\",\"3\":\"0.3412193\",\"4\":\"0.3485657\"},{\"1\":\"DeepLearning_grid_1_AutoML_1_20230616_100129_model_3\",\"2\":\"0.7586363\",\"3\":\"0.3466684\",\"4\":\"0.3093510\"},{\"1\":\"DeepLearning_grid_1_AutoML_1_20230616_100129_model_2\",\"2\":\"0.7513998\",\"3\":\"0.3427398\",\"4\":\"0.3057949\"},{\"1\":\"DeepLearning_grid_2_AutoML_1_20230616_100129_model_1\",\"2\":\"0.7475791\",\"3\":\"0.3372829\",\"4\":\"0.2951529\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n# Create the plotting function for the models based on AUC and LogLoss (taken from Business Case)\nplot_h2o_leaderboard <- function(h2o_leaderboard, order_by = c(\"auc\", \"logloss\"), \n                                 n_max = 20, size = 4, include_lbl = TRUE) {\n  \n  \n  order_by <- tolower(order_by[[1]])\n  \n  leaderboard_tbl <- h2o_leaderboard %>%\n    as_tibble() %>%\n    select(-c(aucpr, mean_per_class_error, rmse, mse)) %>% \n    mutate(model_type = str_extract(model_id, \"[^_]+\")) %>%\n    rownames_to_column(var = \"rowname\") %>%\n    mutate(model_id = paste0(rowname, \". \", model_id) %>% as.factor())\n  \n  # Transformation\n  if (order_by == \"auc\") {\n    \n    data_transformed_tbl <- leaderboard_tbl %>%\n      slice(1:n_max) %>%\n      mutate(\n        model_id   = as_factor(model_id) %>% reorder(auc),\n        model_type = as.factor(model_type)\n      ) %>%\n      pivot_longer(cols = -c(model_id, model_type, rowname), \n                   names_to = \"key\", \n                   values_to = \"value\", \n                   names_transform = list(key = forcats::fct_inorder)\n      )\n    \n  } else if (order_by == \"logloss\") {\n    \n    data_transformed_tbl <- leaderboard_tbl %>%\n      slice(1:n_max) %>%\n      mutate(\n        model_id   = as_factor(model_id) %>% reorder(logloss) %>% fct_rev(),\n        model_type = as.factor(model_type)\n      ) %>%\n      pivot_longer(cols = -c(model_id, model_type, rowname), \n                   names_to = \"key\", \n                   values_to = \"value\", \n                   names_transform = list(key = forcats::fct_inorder)\n      )\n    \n  } else {\n    # If nothing is supplied\n    stop(paste0(\"order_by = '\", order_by, \"' is not a permitted option.\"))\n  }\n  \n  # Visualization\n  g <- data_transformed_tbl %>%\n    ggplot(aes(value, model_id, color = model_type)) +\n    geom_point(size = size) +\n    facet_wrap(~ key, scales = \"free_x\") +\n    labs(title = \"Leaderboard Metrics\",\n         subtitle = paste0(\"Ordered by: \", toupper(order_by)),\n         y = \"Model Postion, Model ID\", x = \"\")\n  \n  if (include_lbl) g <- g + geom_label(aes(label = round(value, 2), \n                                           hjust = \"inward\"))\n  \n  return(g)\n  \n}\n\n# Use our function to create the plot\nh2o_plot <- automl_models_h2o@leaderboard %>% plot_h2o_leaderboard()\n\n# Save the plot\nggsave(\"h2o_plot.png\", h2o_plot, width=15, height=15)\n\nh2o_plot\n```\n\n::: {.cell-output-display}\n![](AutoML2PerfMeas_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Grid Search\n\n# Load the model we saved\ndeeplearning_h2o <- h2o.loadModel(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdml-VictorReaver1999\\\\PerfMeas\\\\saved_model\\\\StackedEnsemble_AllModels_3_AutoML_1\")\n\n# View all of its parameters\ndeeplearning_h2o@allparameters\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> $model_id\n#> [1] \"StackedEnsemble_AllModels_3_AutoML_1_20230615_175016\"\n#> \n#> $base_models\n#> $base_models[[1]]\n#> $base_models[[1]]$`__meta`\n#> $base_models[[1]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[1]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[1]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[1]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_1\"\n#> \n#> $base_models[[1]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[1]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[2]]\n#> $base_models[[2]]$`__meta`\n#> $base_models[[2]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[2]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[2]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[2]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_7\"\n#> \n#> $base_models[[2]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[2]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[3]]\n#> $base_models[[3]]$`__meta`\n#> $base_models[[3]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[3]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[3]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[3]]$name\n#> [1] \"GBM_4_AutoML_1_20230615_175016\"\n#> \n#> $base_models[[3]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[3]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[4]]\n#> $base_models[[4]]$`__meta`\n#> $base_models[[4]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[4]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[4]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[4]]$name\n#> [1] \"GBM_1_AutoML_1_20230615_175016\"\n#> \n#> $base_models[[4]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[4]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[5]]\n#> $base_models[[5]]$`__meta`\n#> $base_models[[5]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[5]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[5]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[5]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_9\"\n#> \n#> $base_models[[5]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[5]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[6]]\n#> $base_models[[6]]$`__meta`\n#> $base_models[[6]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[6]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[6]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[6]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_5\"\n#> \n#> $base_models[[6]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[6]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[7]]\n#> $base_models[[7]]$`__meta`\n#> $base_models[[7]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[7]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[7]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[7]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_10\"\n#> \n#> $base_models[[7]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[7]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[8]]\n#> $base_models[[8]]$`__meta`\n#> $base_models[[8]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[8]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[8]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[8]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_4\"\n#> \n#> $base_models[[8]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[8]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[9]]\n#> $base_models[[9]]$`__meta`\n#> $base_models[[9]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[9]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[9]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[9]]$name\n#> [1] \"GBM_3_AutoML_1_20230615_175016\"\n#> \n#> $base_models[[9]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[9]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[10]]\n#> $base_models[[10]]$`__meta`\n#> $base_models[[10]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[10]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[10]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[10]]$name\n#> [1] \"GBM_2_AutoML_1_20230615_175016\"\n#> \n#> $base_models[[10]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[10]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[11]]\n#> $base_models[[11]]$`__meta`\n#> $base_models[[11]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[11]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[11]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[11]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_11\"\n#> \n#> $base_models[[11]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[11]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[12]]\n#> $base_models[[12]]$`__meta`\n#> $base_models[[12]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[12]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[12]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[12]]$name\n#> [1] \"GBM_5_AutoML_1_20230615_175016\"\n#> \n#> $base_models[[12]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[12]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[13]]\n#> $base_models[[13]]$`__meta`\n#> $base_models[[13]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[13]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[13]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[13]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_6\"\n#> \n#> $base_models[[13]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[13]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[14]]\n#> $base_models[[14]]$`__meta`\n#> $base_models[[14]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[14]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[14]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[14]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_8\"\n#> \n#> $base_models[[14]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[14]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[15]]\n#> $base_models[[15]]$`__meta`\n#> $base_models[[15]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[15]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[15]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[15]]$name\n#> [1] \"DRF_1_AutoML_1_20230615_175016\"\n#> \n#> $base_models[[15]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[15]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[16]]\n#> $base_models[[16]]$`__meta`\n#> $base_models[[16]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[16]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[16]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[16]]$name\n#> [1] \"XRT_1_AutoML_1_20230615_175016\"\n#> \n#> $base_models[[16]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[16]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[17]]\n#> $base_models[[17]]$`__meta`\n#> $base_models[[17]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[17]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[17]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[17]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_3\"\n#> \n#> $base_models[[17]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[17]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[18]]\n#> $base_models[[18]]$`__meta`\n#> $base_models[[18]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[18]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[18]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[18]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_2\"\n#> \n#> $base_models[[18]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[18]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[19]]\n#> $base_models[[19]]$`__meta`\n#> $base_models[[19]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[19]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[19]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[19]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_12\"\n#> \n#> $base_models[[19]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[19]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[20]]\n#> $base_models[[20]]$`__meta`\n#> $base_models[[20]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[20]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[20]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[20]]$name\n#> [1] \"GBM_grid_1_AutoML_1_20230615_175016_model_13\"\n#> \n#> $base_models[[20]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[20]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[21]]\n#> $base_models[[21]]$`__meta`\n#> $base_models[[21]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[21]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[21]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[21]]$name\n#> [1] \"DeepLearning_1_AutoML_1_20230615_175016\"\n#> \n#> $base_models[[21]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[21]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[22]]\n#> $base_models[[22]]$`__meta`\n#> $base_models[[22]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[22]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[22]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[22]]$name\n#> [1] \"DeepLearning_grid_1_AutoML_1_20230615_175016_model_1\"\n#> \n#> $base_models[[22]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[22]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[23]]\n#> $base_models[[23]]$`__meta`\n#> $base_models[[23]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[23]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[23]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[23]]$name\n#> [1] \"GLM_1_AutoML_1_20230615_175016\"\n#> \n#> $base_models[[23]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[23]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[24]]\n#> $base_models[[24]]$`__meta`\n#> $base_models[[24]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[24]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[24]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[24]]$name\n#> [1] \"DeepLearning_grid_1_AutoML_1_20230615_175016_model_2\"\n#> \n#> $base_models[[24]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[24]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[25]]\n#> $base_models[[25]]$`__meta`\n#> $base_models[[25]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[25]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[25]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[25]]$name\n#> [1] \"DeepLearning_grid_1_AutoML_1_20230615_175016_model_4\"\n#> \n#> $base_models[[25]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[25]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[26]]\n#> $base_models[[26]]$`__meta`\n#> $base_models[[26]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[26]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[26]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[26]]$name\n#> [1] \"DeepLearning_grid_1_AutoML_1_20230615_175016_model_3\"\n#> \n#> $base_models[[26]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[26]]$URL\n#> NULL\n#> \n#> \n#> \n#> $metalearner_algorithm\n#> [1] \"glm\"\n#> \n#> $metalearner_nfolds\n#> [1] 5\n#> \n#> $metalearner_params\n#> [1] \"\"\n#> \n#> $metalearner_transform\n#> [1] \"Logit\"\n#> \n#> $max_runtime_secs\n#> [1] 7.085\n#> \n#> $seed\n#> [1] \"-985515021417168851\"\n#> \n#> $score_training_samples\n#> [1] 10000\n#> \n#> $keep_levelone_frame\n#> [1] TRUE\n#> \n#> $auc_type\n#> [1] \"AUTO\"\n#> \n#> $x\n#>  [1] \"sku\"               \"national_inv\"      \"lead_time\"        \n#>  [4] \"in_transit_qty\"    \"forecast_3_month\"  \"forecast_6_month\" \n#>  [7] \"forecast_9_month\"  \"sales_1_month\"     \"sales_3_month\"    \n#> [10] \"sales_6_month\"     \"sales_9_month\"     \"min_bank\"         \n#> [13] \"potential_issue\"   \"pieces_past_due\"   \"perf_6_month_avg\" \n#> [16] \"perf_12_month_avg\" \"local_bo_qty\"      \"deck_risk\"        \n#> [19] \"oe_constraint\"     \"ppap_risk\"         \"stop_auto_buy\"    \n#> [22] \"rev_stop\"         \n#> \n#> $y\n#> [1] \"went_on_backorder\"\n```\n:::\n\n```{.r .cell-code}\nDeeplearning_grid_01 <- h2o.grid( algorithm = \"deeplearning\",grid_id = \"Deaplearning_grid_01\",\n  \n     # Predictor and response variables\n     x = x,\n     y = y,\n\n     # Traind and Validation sets + the number of folds for CV\n     training_frame   = train_h2o,\n     validation_frame = valid_h2o,\n     nfolds = 5,\n\n     # Hyperparamters\n     hyper_params = list(\n         # Use some combinations (the first one was the original)\n         hidden = list(c(10, 10, 10), c(50, 20, 10), c(20, 20, 20)),\n         epochs = c(10, 50, 100)\n     )\n )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\n# Get the 3rd model from H2O's Deep Learning Grid Models, Save it, and then load it\n# Deeplearning_grid_01_model_3 <- h2o.getModel(\"Deaplearning_grid_01_model_3\")\n# Deeplearning_grid_01_model_3 %>% h2o.saveModel(path = \"save_model/Deaplearning_grid_01_model_3\")\nDeeplearning_grid_01_model_3 <- h2o.loadModel(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdml-VictorReaver1999\\\\PerfMeas\\\\save_model\\\\Deaplearning_grid_01_model_3\")\n\n# Evaluate and save its performance and then transform it into a table through h2o metric extraction\nperformance_h2o <- h2o.performance(Deeplearning_grid_01_model_3, newdata = as.h2o(test_tbl))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\nperformance_tbl <- performance_h2o %>% h2o.metric() %>% as.tibble()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#> ℹ Please use `as_tibble()` instead.\n#> ℹ The signature and semantics have changed, see `?as_tibble`.\n```\n:::\n\n```{.r .cell-code}\n# specify a new theme \ntheme_new <- theme(\n  legend.position  = \"bottom\",\n  panel.background = element_rect(fill   = \"transparent\"),\n  panel.border     = element_rect(color = \"black\", fill = NA, size = 0.5),\n  panel.grid.major = element_line(color = \"grey\", size = 0.333)\n  ) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\n#> ℹ Please use the `linewidth` argument instead.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\n#> ℹ Please use the `linewidth` argument instead.\n```\n:::\n\n```{.r .cell-code}\n# Save the performance table\n# saveRDS(performance_tbl, file = \"performance_tbl.rds\")\n\n# Load the performance table\nperformance_tbl <- readRDS(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdml-VictorReaver1999\\\\PerfMeas\\\\performance_tbl.rds\")\n\n\n# Visualize the trade off between the precision and the recall and the optimal threshold\nperformance_tbl %>%\n  filter(f1 == max(f1))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"threshold\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"f1\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"f2\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"f0point5\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"accuracy\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"precision\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"recall\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"specificity\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"absolute_mcc\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"min_per_class_accuracy\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"mean_per_class_accuracy\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"tns\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"fns\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"fps\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"tps\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"tnr\"],\"name\":[16],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"fnr\"],\"name\":[17],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"fpr\"],\"name\":[18],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"tpr\"],\"name\":[19],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"idx\"],\"name\":[20],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"0.08967357\",\"2\":\"0.5781434\",\"3\":\"0.6439791\",\"4\":\"0.5245203\",\"5\":\"0.8743877\",\"6\":\"0.4939759\",\"7\":\"0.6968839\",\"8\":\"0.8994012\",\"9\":\"0.517219\",\"10\":\"0.6968839\",\"11\":\"0.7981425\",\"12\":\"2253\",\"13\":\"107\",\"14\":\"252\",\"15\":\"246\",\"16\":\"0.8994012\",\"17\":\"0.3031161\",\"18\":\"0.1005988\",\"19\":\"0.6968839\",\"20\":\"251\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nprecision_vs_recall_plot_optim <- performance_tbl %>%\n  ggplot(aes(x = threshold)) +\n  geom_line(aes(y = precision), color = \"blue\", size = 1) +\n  geom_line(aes(y = recall), color = \"red\", size = 1) +\n  \n  # Insert line where precision and recall are harmonically optimized\n  geom_vline(xintercept = h2o.find_threshold_by_max_metric(performance_h2o, \"f1\")) +\n  labs(title = \"Precision vs Recall\", y = \"value\") +\n  theme_new\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `linewidth` instead.\n```\n:::\n\n```{.r .cell-code}\nggsave(\"precision_vs_recall_plot_optim.png\", precision_vs_recall_plot_optim)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Saving 7 x 5 in image\n```\n:::\n\n```{.r .cell-code}\nprecision_vs_recall_plot_optim\n```\n\n::: {.cell-output-display}\n![](AutoML2PerfMeas_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Visualize the ROC Plot\nROC_plot <- performance_tbl %>%\n  ggplot(aes(fpr, tpr)) +\n  geom_line(size = 1) +\n  \n  # just for demonstration purposes\n  geom_abline(color = \"red\", linetype = \"dotted\") +\n  \n  theme_new +\n  theme(\n    legend.direction = \"vertical\",\n  ) +\n  labs(\n    title = \"ROC Plot\",\n    subtitle = \"Performance of 3 Top Performing Models\"\n  )\n\nggsave(\"ROC_plot.png\", ROC_plot)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Saving 7 x 5 in image\n```\n:::\n\n```{.r .cell-code}\nROC_plot\n```\n\n::: {.cell-output-display}\n![](AutoML2PerfMeas_files/figure-html/unnamed-chunk-1-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# Precision vs Recall Plot\nprec_vs_recall <- performance_tbl %>%\n  ggplot(aes(recall, precision)) +\n  geom_line(size = 1) +\n  theme_new + \n  theme(\n    legend.direction = \"vertical\",\n  ) +\n  labs(\n    title = \"Precision vs Recall Plot\",\n    subtitle = \"Performance of 3 Top Performing Models\"\n  )\n\nggsave(\"Prec_Vs_Recall.png\", prec_vs_recall)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Saving 7 x 5 in image\n```\n:::\n\n```{.r .cell-code}\nprec_vs_recall\n```\n\n::: {.cell-output-display}\n![](AutoML2PerfMeas_files/figure-html/unnamed-chunk-1-4.png){width=672}\n:::\n\n```{.r .cell-code}\n# Creating the ranked predictions table\nranked_predictions_tbl <- predictions_tbl %>%\n  bind_cols(test_tbl) %>%\n  select(predict:Yes, went_on_backorder) %>%\n  # Sorting from highest to lowest class probability\n  arrange(desc(Yes))\n\n# Creating the gain and lift table from the ranked predictions table\ncalculated_gain_lift_tbl <- ranked_predictions_tbl %>%\n  mutate(ntile = ntile(Yes, n = 10)) %>%\n  group_by(ntile) %>%\n  summarise(\n    cases = n(),\n    responses = sum(went_on_backorder == \"Yes\")\n  ) %>%\n  arrange(desc(ntile)) %>%\n  \n  # Add group numbers (opposite of ntile)\n  mutate(group = row_number()) %>%\n  select(group, cases, responses) %>%\n  \n  # Calculations\n  mutate(\n    cumulative_responses = cumsum(responses),\n    pct_responses        = responses / sum(responses),\n    gain                 = cumsum(pct_responses),\n    cumulative_pct_cases = cumsum(cases) / sum(cases),\n    lift                 = gain / cumulative_pct_cases,\n    gain_baseline        = cumulative_pct_cases,\n    lift_baseline        = gain_baseline / cumulative_pct_cases\n  )\n\n\n# Obtaining performance metrics for the gain_lift_table\ngain_lift_tbl <- performance_h2o %>%\n  h2o.gainsLift() %>%\n  as.tibble()\n\n# Transform the gain_lift_table\ngain_transformed_tbl <- gain_lift_tbl %>% \n  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n  select(-contains(\"lift\")) %>%\n  mutate(baseline = cumulative_data_fraction) %>%\n  rename(gain     = cumulative_capture_rate) %>%\n  # prepare the data for the plotting (for the color and group aesthetics)\n  pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_transformed_plot <- gain_transformed_tbl %>%\n  ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n  geom_line(size = 1.5) +\n  labs(\n    title = \"Gain Chart\",\n    x = \"Cumulative Data Fraction\",\n    y = \"Gain\"\n  ) +\n  theme_new\n\nggsave(\"gain_transformed_plot.png\", gain_transformed_plot)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Saving 7 x 5 in image\n```\n:::\n\n```{.r .cell-code}\ngain_transformed_plot\n```\n\n::: {.cell-output-display}\n![](AutoML2PerfMeas_files/figure-html/unnamed-chunk-1-5.png){width=672}\n:::\n\n```{.r .cell-code}\n# Creating the lift_transformed_table\nlift_transformed_tbl <- gain_lift_tbl %>% \n  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n  select(-contains(\"capture\")) %>%\n  mutate(baseline = 1) %>%\n  rename(lift = cumulative_lift) %>%\n  pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_transformed_plot <- lift_transformed_tbl %>%\n  ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n  geom_line(size = 1.5) +\n  labs(\n    title = \"Lift Chart\",\n    x = \"Cumulative Data Fraction\",\n    y = \"Lift\"\n  ) +\n  theme_new\n\nggsave(\"lift_transformed_plot.png\", lift_transformed_plot)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Saving 7 x 5 in image\n```\n:::\n\n```{.r .cell-code}\nlift_transformed_plot\n```\n\n::: {.cell-output-display}\n![](AutoML2PerfMeas_files/figure-html/unnamed-chunk-1-6.png){width=672}\n:::\n\n```{.r .cell-code}\n# Creating a dashboard using cowplot\n# cowplot::get_legend extracts a legend from a ggplot object\np_legend <- cowplot::get_legend(ROC_plot)\n# Remove legend from p1\nROC_plot <- ROC_plot + theme(legend.position = \"none\")\n\n# cowplot::plt_grid() combines multiple ggplots into a single cowplot object\ncowplotgrid <- cowplot::plot_grid(ROC_plot, prec_vs_recall, gain_transformed_plot, lift_transformed_plot,  ncol = 2)\nggsave(\"cowplot.png\", cowplotgrid)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Saving 7 x 5 in image\n```\n:::\n\n```{.r .cell-code}\n# Display cowplot\ncowplotgrid\n```\n\n::: {.cell-output-display}\n![](AutoML2PerfMeas_files/figure-html/unnamed-chunk-1-7.png){width=672}\n:::\n:::\n\n\n\n**End of AutoML2 and Performance Measurement Challenge**",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}